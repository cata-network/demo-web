(self.webpackChunkwebpack_demo=self.webpackChunkwebpack_demo||[]).push([[409],{2409:(e,t,n)=>{var o=n(1715);e.exports=o},1595:e=>{var t,n,o,r,i,a,s,c=c||function(e,t){var n={},o=n.lib={},r=function(){},i=o.Base={extend:function(e){r.prototype=this;var t=new r;return e&&t.mixIn(e),t.hasOwnProperty("init")||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},a=o.WordArray=i.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||c).stringify(this)},concat:function(e){var t=this.words,n=e.words,o=this.sigBytes;if(e=e.sigBytes,this.clamp(),o%4)for(var r=0;r<e;r++)t[o+r>>>2]|=(n[r>>>2]>>>24-r%4*8&255)<<24-(o+r)%4*8;else if(65535<n.length)for(r=0;r<e;r+=4)t[o+r>>>2]=n[r>>>2];else t.push.apply(t,n);return this.sigBytes+=e,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=i.clone.call(this);return e.words=this.words.slice(0),e},random:function(t){for(var n=[],o=0;o<t;o+=4)n.push(4294967296*e.random()|0);return new a.init(n,t)}}),s=n.enc={},c=s.Hex={stringify:function(e){var t=e.words;e=e.sigBytes;for(var n=[],o=0;o<e;o++){var r=t[o>>>2]>>>24-o%4*8&255;n.push((r>>>4).toString(16)),n.push((15&r).toString(16))}return n.join("")},parse:function(e){for(var t=e.length,n=[],o=0;o<t;o+=2)n[o>>>3]|=parseInt(e.substr(o,2),16)<<24-o%8*4;return new a.init(n,t/2)}},u=s.Latin1={stringify:function(e){var t=e.words;e=e.sigBytes;for(var n=[],o=0;o<e;o++)n.push(String.fromCharCode(t[o>>>2]>>>24-o%4*8&255));return n.join("")},parse:function(e){for(var t=e.length,n=[],o=0;o<t;o++)n[o>>>2]|=(255&e.charCodeAt(o))<<24-o%4*8;return new a.init(n,t)}},l=s.Utf8={stringify:function(e){try{return decodeURIComponent(escape(u.stringify(e)))}catch(e){throw Error("Malformed UTF-8 data")}},parse:function(e){return u.parse(unescape(encodeURIComponent(e)))}},d=o.BufferedBlockAlgorithm=i.extend({reset:function(){this._data=new a.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=l.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n=this._data,o=n.words,r=n.sigBytes,i=this.blockSize,s=r/(4*i);if(t=(s=t?e.ceil(s):e.max((0|s)-this._minBufferSize,0))*i,r=e.min(4*t,r),t){for(var c=0;c<t;c+=i)this._doProcessBlock(o,c);c=o.splice(0,t),n.sigBytes-=r}return new a.init(c,r)},clone:function(){var e=i.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0});o.Hasher=d.extend({cfg:i.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){d.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new h.HMAC.init(e,n).finalize(t)}}});var h=n.algo={};return n}(Math);n=(i=(t=c).lib).WordArray,o=i.Hasher,r=[],i=t.algo.SHA1=o.extend({_doReset:function(){this._hash=new n.init([1732584193,4023233417,2562383102,271733878,3285377520])},_doProcessBlock:function(e,t){for(var n=this._hash.words,o=n[0],i=n[1],a=n[2],s=n[3],c=n[4],u=0;80>u;u++){if(16>u)r[u]=0|e[t+u];else{var l=r[u-3]^r[u-8]^r[u-14]^r[u-16];r[u]=l<<1|l>>>31}l=(o<<5|o>>>27)+c+r[u],l=20>u?l+(1518500249+(i&a|~i&s)):40>u?l+(1859775393+(i^a^s)):60>u?l+((i&a|i&s|a&s)-1894007588):l+((i^a^s)-899497514),c=s,s=a,a=i<<30|i>>>2,i=o,o=l}n[0]=n[0]+o|0,n[1]=n[1]+i|0,n[2]=n[2]+a|0,n[3]=n[3]+s|0,n[4]=n[4]+c|0},_doFinalize:function(){var e=this._data,t=e.words,n=8*this._nDataBytes,o=8*e.sigBytes;return t[o>>>5]|=128<<24-o%32,t[14+(o+64>>>9<<4)]=Math.floor(n/4294967296),t[15+(o+64>>>9<<4)]=n,e.sigBytes=4*t.length,this._process(),this._hash},clone:function(){var e=o.clone.call(this);return e._hash=this._hash.clone(),e}}),t.SHA1=o._createHelper(i),t.HmacSHA1=o._createHmacHelper(i),function(){var e=c,t=e.enc.Utf8;e.algo.HMAC=e.lib.Base.extend({init:function(e,n){e=this._hasher=new e.init,"string"==typeof n&&(n=t.parse(n));var o=e.blockSize,r=4*o;n.sigBytes>r&&(n=e.finalize(n)),n.clamp();for(var i=this._oKey=n.clone(),a=this._iKey=n.clone(),s=i.words,c=a.words,u=0;u<o;u++)s[u]^=1549556828,c[u]^=909522486;i.sigBytes=a.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher;return e=t.finalize(e),t.reset(),t.finalize(this._oKey.clone().concat(e))}})}(),s=(a=c).lib.WordArray,a.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,o=this._map;e.clamp();for(var r=[],i=0;i<n;i+=3)for(var a=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,s=0;s<4&&i+.75*s<n;s++)r.push(o.charAt(a>>>6*(3-s)&63));var c=o.charAt(64);if(c)for(;r.length%4;)r.push(c);return r.join("")},parse:function(e){var t=e.length,n=this._map,o=n.charAt(64);if(o){var r=e.indexOf(o);-1!=r&&(t=r)}for(var i=[],a=0,c=0;c<t;c++)if(c%4){var u=n.indexOf(e.charAt(c-1))<<c%4*2,l=n.indexOf(e.charAt(c))>>>6-c%4*2;i[a>>>2]|=(u|l)<<24-a%4*8,a++}return s.create(i,a)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},e.exports=c},1412:e=>{var t="a-zA-Z_À-ÖØ-öø-ÿͰ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿿、-퟿豈-﷏ﷰ-�",n=new RegExp("^([^"+t+"])|^((x|X)(m|M)(l|L))|([^"+t+"-.0-9·̀-ͯ‿⁀])","g"),o=/[^\x09\x0A\x0D\x20-\xFF\x85\xA0-\uD7FF\uE000-\uFDCF\uFDE0-\uFFFD]/gm,r=function(e){var t=[];if(e instanceof Object)for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t},i=function(e,t){var i=function(e,o,r,i,a){var s=void 0!==t.indent?t.indent:"\t",c=t.prettyPrint?"\n"+new Array(i).join(s):"";t.removeIllegalNameCharacters&&(e=e.replace(n,"_"));var u=[c,"<",e,r||""];return o&&o.length>0?(u.push(">"),u.push(o),a&&u.push(c),u.push("</"),u.push(e),u.push(">")):u.push("/>"),u.join("")};return function e(n,a,s){var c=typeof n;switch((Array.isArray?Array.isArray(n):n instanceof Array)?c="array":n instanceof Date&&(c="date"),c){case"array":var u=[];return n.map((function(t){u.push(e(t,0,s+1))})),t.prettyPrint&&u.push("\n"),u.join("");case"date":return n.toJSON?n.toJSON():n+"";case"object":var l=[];for(var d in n)if(n.hasOwnProperty(d))if(n[d]instanceof Array)for(var h=0;h<n[d].length;h++)n[d].hasOwnProperty(h)&&l.push(i(d,e(n[d][h],0,s+1),null,s+1,r(n[d][h]).length));else l.push(i(d,e(n[d],0,s+1),null,s+1));return t.prettyPrint&&l.length>0&&l.push("\n"),l.join("");case"function":return n();default:return t.escape?(""+n).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/'/g,"&apos;").replace(/"/g,"&quot;").replace(o,""):""+n}}(e,0,0)},a=function(e){var t=['<?xml version="1.0" encoding="UTF-8"'];return e&&t.push(' standalone="yes"'),t.push("?>"),t.join("")};e.exports=function(e,t){if(t||(t={xmlHeader:{standalone:!0},prettyPrint:!0,indent:"  ",escape:!0}),"string"==typeof e)try{e=JSON.parse(e.toString())}catch(e){return!1}var n="",o="";return t&&("object"==typeof t?(t.xmlHeader&&(n=a(!!t.xmlHeader.standalone)),void 0!==t.docType&&(o="<!DOCTYPE "+t.docType+">")):n=a()),[n,(t=t||{}).prettyPrint&&o?"\n":"",o,i(e,t)].join("").replace(/\n{2,}/g,"\n").replace(/\s+$/g,"")}},5432:(module,exports,__webpack_require__)=>{var __WEBPACK_AMD_DEFINE_RESULT__;(function(){"use strict";var ERROR="input is invalid type",WINDOW="object"==typeof window,root=WINDOW?window:{};root.JS_MD5_NO_WINDOW&&(WINDOW=!1);var WEB_WORKER=!WINDOW&&"object"==typeof self,NODE_JS=!root.JS_MD5_NO_NODE_JS&&"object"==typeof process&&process.versions&&process.versions.node;NODE_JS?root=__webpack_require__.g:WEB_WORKER&&(root=self);var COMMON_JS=!root.JS_MD5_NO_COMMON_JS&&module.exports,AMD=__webpack_require__.amdO,ARRAY_BUFFER=!root.JS_MD5_NO_ARRAY_BUFFER&&"undefined"!=typeof ArrayBuffer,HEX_CHARS="0123456789abcdef".split(""),EXTRA=[128,32768,8388608,-2147483648],SHIFT=[0,8,16,24],OUTPUT_TYPES=["hex","array","digest","buffer","arrayBuffer","base64"],BASE64_ENCODE_CHAR="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split(""),blocks=[],buffer8;if(ARRAY_BUFFER){var buffer=new ArrayBuffer(68);buffer8=new Uint8Array(buffer),blocks=new Uint32Array(buffer)}!root.JS_MD5_NO_NODE_JS&&Array.isArray||(Array.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)}),!ARRAY_BUFFER||!root.JS_MD5_NO_ARRAY_BUFFER_IS_VIEW&&ArrayBuffer.isView||(ArrayBuffer.isView=function(e){return"object"==typeof e&&e.buffer&&e.buffer.constructor===ArrayBuffer});var createOutputMethod=function(e){return function(t,n){return new Md5(!0).update(t,n)[e]()}},createMethod=function(){var e=createOutputMethod("hex");NODE_JS&&(e=nodeWrap(e)),e.getCtx=e.create=function(){return new Md5},e.update=function(t){return e.create().update(t)};for(var t=0;t<OUTPUT_TYPES.length;++t){var n=OUTPUT_TYPES[t];e[n]=createOutputMethod(n)}return e},nodeWrap=function(method){var crypto=eval("require('crypto')"),Buffer=eval("require('buffer').Buffer"),nodeMethod=function(e){if("string"==typeof e)return crypto.createHash("md5").update(e,"utf8").digest("hex");if(null==e)throw ERROR;return e.constructor===ArrayBuffer&&(e=new Uint8Array(e)),Array.isArray(e)||ArrayBuffer.isView(e)||e.constructor===Buffer?crypto.createHash("md5").update(new Buffer(e)).digest("hex"):method(e)};return nodeMethod};function Md5(e){if(e)blocks[0]=blocks[16]=blocks[1]=blocks[2]=blocks[3]=blocks[4]=blocks[5]=blocks[6]=blocks[7]=blocks[8]=blocks[9]=blocks[10]=blocks[11]=blocks[12]=blocks[13]=blocks[14]=blocks[15]=0,this.blocks=blocks,this.buffer8=buffer8;else if(ARRAY_BUFFER){var t=new ArrayBuffer(68);this.buffer8=new Uint8Array(t),this.blocks=new Uint32Array(t)}else this.blocks=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];this.h0=this.h1=this.h2=this.h3=this.start=this.bytes=this.hBytes=0,this.finalized=this.hashed=!1,this.first=!0}Md5.prototype.update=function(e,t){if(!this.finalized){for(var n,o,r=0,i=e.length,a=this.blocks,s=this.buffer8;r<i;){if(this.hashed&&(this.hashed=!1,a[0]=a[16],a[16]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=a[10]=a[11]=a[12]=a[13]=a[14]=a[15]=0),ARRAY_BUFFER)for(o=this.start;r<i&&o<64;++r)n=e.charCodeAt(r),t||n<128?s[o++]=n:n<2048?(s[o++]=192|n>>6,s[o++]=128|63&n):n<55296||n>=57344?(s[o++]=224|n>>12,s[o++]=128|n>>6&63,s[o++]=128|63&n):(n=65536+((1023&n)<<10|1023&e.charCodeAt(++r)),s[o++]=240|n>>18,s[o++]=128|n>>12&63,s[o++]=128|n>>6&63,s[o++]=128|63&n);else for(o=this.start;r<i&&o<64;++r)n=e.charCodeAt(r),t||n<128?a[o>>2]|=n<<SHIFT[3&o++]:n<2048?(a[o>>2]|=(192|n>>6)<<SHIFT[3&o++],a[o>>2]|=(128|63&n)<<SHIFT[3&o++]):n<55296||n>=57344?(a[o>>2]|=(224|n>>12)<<SHIFT[3&o++],a[o>>2]|=(128|n>>6&63)<<SHIFT[3&o++],a[o>>2]|=(128|63&n)<<SHIFT[3&o++]):(n=65536+((1023&n)<<10|1023&e.charCodeAt(++r)),a[o>>2]|=(240|n>>18)<<SHIFT[3&o++],a[o>>2]|=(128|n>>12&63)<<SHIFT[3&o++],a[o>>2]|=(128|n>>6&63)<<SHIFT[3&o++],a[o>>2]|=(128|63&n)<<SHIFT[3&o++]);this.lastByteIndex=o,this.bytes+=o-this.start,o>=64?(this.start=o-64,this.hash(),this.hashed=!0):this.start=o}return this.bytes>4294967295&&(this.hBytes+=this.bytes/4294967296<<0,this.bytes=this.bytes%4294967296),this}},Md5.prototype.finalize=function(){if(!this.finalized){this.finalized=!0;var e=this.blocks,t=this.lastByteIndex;e[t>>2]|=EXTRA[3&t],t>=56&&(this.hashed||this.hash(),e[0]=e[16],e[16]=e[1]=e[2]=e[3]=e[4]=e[5]=e[6]=e[7]=e[8]=e[9]=e[10]=e[11]=e[12]=e[13]=e[14]=e[15]=0),e[14]=this.bytes<<3,e[15]=this.hBytes<<3|this.bytes>>>29,this.hash()}},Md5.prototype.hash=function(){var e,t,n,o,r,i,a=this.blocks;this.first?t=((t=((e=((e=a[0]-680876937)<<7|e>>>25)-271733879<<0)^(n=((n=(-271733879^(o=((o=(-1732584194^2004318071&e)+a[1]-117830708)<<12|o>>>20)+e<<0)&(-271733879^e))+a[2]-1126478375)<<17|n>>>15)+o<<0)&(o^e))+a[3]-1316259209)<<22|t>>>10)+n<<0:(e=this.h0,t=this.h1,n=this.h2,t=((t+=((e=((e+=((o=this.h3)^t&(n^o))+a[0]-680876936)<<7|e>>>25)+t<<0)^(n=((n+=(t^(o=((o+=(n^e&(t^n))+a[1]-389564586)<<12|o>>>20)+e<<0)&(e^t))+a[2]+606105819)<<17|n>>>15)+o<<0)&(o^e))+a[3]-1044525330)<<22|t>>>10)+n<<0),t=((t+=((e=((e+=(o^t&(n^o))+a[4]-176418897)<<7|e>>>25)+t<<0)^(n=((n+=(t^(o=((o+=(n^e&(t^n))+a[5]+1200080426)<<12|o>>>20)+e<<0)&(e^t))+a[6]-1473231341)<<17|n>>>15)+o<<0)&(o^e))+a[7]-45705983)<<22|t>>>10)+n<<0,t=((t+=((e=((e+=(o^t&(n^o))+a[8]+1770035416)<<7|e>>>25)+t<<0)^(n=((n+=(t^(o=((o+=(n^e&(t^n))+a[9]-1958414417)<<12|o>>>20)+e<<0)&(e^t))+a[10]-42063)<<17|n>>>15)+o<<0)&(o^e))+a[11]-1990404162)<<22|t>>>10)+n<<0,t=((t+=((e=((e+=(o^t&(n^o))+a[12]+1804603682)<<7|e>>>25)+t<<0)^(n=((n+=(t^(o=((o+=(n^e&(t^n))+a[13]-40341101)<<12|o>>>20)+e<<0)&(e^t))+a[14]-1502002290)<<17|n>>>15)+o<<0)&(o^e))+a[15]+1236535329)<<22|t>>>10)+n<<0,t=((t+=((o=((o+=(t^n&((e=((e+=(n^o&(t^n))+a[1]-165796510)<<5|e>>>27)+t<<0)^t))+a[6]-1069501632)<<9|o>>>23)+e<<0)^e&((n=((n+=(e^t&(o^e))+a[11]+643717713)<<14|n>>>18)+o<<0)^o))+a[0]-373897302)<<20|t>>>12)+n<<0,t=((t+=((o=((o+=(t^n&((e=((e+=(n^o&(t^n))+a[5]-701558691)<<5|e>>>27)+t<<0)^t))+a[10]+38016083)<<9|o>>>23)+e<<0)^e&((n=((n+=(e^t&(o^e))+a[15]-660478335)<<14|n>>>18)+o<<0)^o))+a[4]-405537848)<<20|t>>>12)+n<<0,t=((t+=((o=((o+=(t^n&((e=((e+=(n^o&(t^n))+a[9]+568446438)<<5|e>>>27)+t<<0)^t))+a[14]-1019803690)<<9|o>>>23)+e<<0)^e&((n=((n+=(e^t&(o^e))+a[3]-187363961)<<14|n>>>18)+o<<0)^o))+a[8]+1163531501)<<20|t>>>12)+n<<0,t=((t+=((o=((o+=(t^n&((e=((e+=(n^o&(t^n))+a[13]-1444681467)<<5|e>>>27)+t<<0)^t))+a[2]-51403784)<<9|o>>>23)+e<<0)^e&((n=((n+=(e^t&(o^e))+a[7]+1735328473)<<14|n>>>18)+o<<0)^o))+a[12]-1926607734)<<20|t>>>12)+n<<0,t=((t+=((i=(o=((o+=((r=t^n)^(e=((e+=(r^o)+a[5]-378558)<<4|e>>>28)+t<<0))+a[8]-2022574463)<<11|o>>>21)+e<<0)^e)^(n=((n+=(i^t)+a[11]+1839030562)<<16|n>>>16)+o<<0))+a[14]-35309556)<<23|t>>>9)+n<<0,t=((t+=((i=(o=((o+=((r=t^n)^(e=((e+=(r^o)+a[1]-1530992060)<<4|e>>>28)+t<<0))+a[4]+1272893353)<<11|o>>>21)+e<<0)^e)^(n=((n+=(i^t)+a[7]-155497632)<<16|n>>>16)+o<<0))+a[10]-1094730640)<<23|t>>>9)+n<<0,t=((t+=((i=(o=((o+=((r=t^n)^(e=((e+=(r^o)+a[13]+681279174)<<4|e>>>28)+t<<0))+a[0]-358537222)<<11|o>>>21)+e<<0)^e)^(n=((n+=(i^t)+a[3]-722521979)<<16|n>>>16)+o<<0))+a[6]+76029189)<<23|t>>>9)+n<<0,t=((t+=((i=(o=((o+=((r=t^n)^(e=((e+=(r^o)+a[9]-640364487)<<4|e>>>28)+t<<0))+a[12]-421815835)<<11|o>>>21)+e<<0)^e)^(n=((n+=(i^t)+a[15]+530742520)<<16|n>>>16)+o<<0))+a[2]-995338651)<<23|t>>>9)+n<<0,t=((t+=((o=((o+=(t^((e=((e+=(n^(t|~o))+a[0]-198630844)<<6|e>>>26)+t<<0)|~n))+a[7]+1126891415)<<10|o>>>22)+e<<0)^((n=((n+=(e^(o|~t))+a[14]-1416354905)<<15|n>>>17)+o<<0)|~e))+a[5]-57434055)<<21|t>>>11)+n<<0,t=((t+=((o=((o+=(t^((e=((e+=(n^(t|~o))+a[12]+1700485571)<<6|e>>>26)+t<<0)|~n))+a[3]-1894986606)<<10|o>>>22)+e<<0)^((n=((n+=(e^(o|~t))+a[10]-1051523)<<15|n>>>17)+o<<0)|~e))+a[1]-2054922799)<<21|t>>>11)+n<<0,t=((t+=((o=((o+=(t^((e=((e+=(n^(t|~o))+a[8]+1873313359)<<6|e>>>26)+t<<0)|~n))+a[15]-30611744)<<10|o>>>22)+e<<0)^((n=((n+=(e^(o|~t))+a[6]-1560198380)<<15|n>>>17)+o<<0)|~e))+a[13]+1309151649)<<21|t>>>11)+n<<0,t=((t+=((o=((o+=(t^((e=((e+=(n^(t|~o))+a[4]-145523070)<<6|e>>>26)+t<<0)|~n))+a[11]-1120210379)<<10|o>>>22)+e<<0)^((n=((n+=(e^(o|~t))+a[2]+718787259)<<15|n>>>17)+o<<0)|~e))+a[9]-343485551)<<21|t>>>11)+n<<0,this.first?(this.h0=e+1732584193<<0,this.h1=t-271733879<<0,this.h2=n-1732584194<<0,this.h3=o+271733878<<0,this.first=!1):(this.h0=this.h0+e<<0,this.h1=this.h1+t<<0,this.h2=this.h2+n<<0,this.h3=this.h3+o<<0)},Md5.prototype.hex=function(){this.finalize();var e=this.h0,t=this.h1,n=this.h2,o=this.h3;return HEX_CHARS[e>>4&15]+HEX_CHARS[15&e]+HEX_CHARS[e>>12&15]+HEX_CHARS[e>>8&15]+HEX_CHARS[e>>20&15]+HEX_CHARS[e>>16&15]+HEX_CHARS[e>>28&15]+HEX_CHARS[e>>24&15]+HEX_CHARS[t>>4&15]+HEX_CHARS[15&t]+HEX_CHARS[t>>12&15]+HEX_CHARS[t>>8&15]+HEX_CHARS[t>>20&15]+HEX_CHARS[t>>16&15]+HEX_CHARS[t>>28&15]+HEX_CHARS[t>>24&15]+HEX_CHARS[n>>4&15]+HEX_CHARS[15&n]+HEX_CHARS[n>>12&15]+HEX_CHARS[n>>8&15]+HEX_CHARS[n>>20&15]+HEX_CHARS[n>>16&15]+HEX_CHARS[n>>28&15]+HEX_CHARS[n>>24&15]+HEX_CHARS[o>>4&15]+HEX_CHARS[15&o]+HEX_CHARS[o>>12&15]+HEX_CHARS[o>>8&15]+HEX_CHARS[o>>20&15]+HEX_CHARS[o>>16&15]+HEX_CHARS[o>>28&15]+HEX_CHARS[o>>24&15]},Md5.prototype.toString=Md5.prototype.hex,Md5.prototype.digest=function(e){if("hex"===e)return this.hex();this.finalize();var t=this.h0,n=this.h1,o=this.h2,r=this.h3;return[255&t,t>>8&255,t>>16&255,t>>24&255,255&n,n>>8&255,n>>16&255,n>>24&255,255&o,o>>8&255,o>>16&255,o>>24&255,255&r,r>>8&255,r>>16&255,r>>24&255]},Md5.prototype.array=Md5.prototype.digest,Md5.prototype.arrayBuffer=function(){this.finalize();var e=new ArrayBuffer(16),t=new Uint32Array(e);return t[0]=this.h0,t[1]=this.h1,t[2]=this.h2,t[3]=this.h3,e},Md5.prototype.buffer=Md5.prototype.arrayBuffer,Md5.prototype.base64=function(){for(var e,t,n,o="",r=this.array(),i=0;i<15;)e=r[i++],t=r[i++],n=r[i++],o+=BASE64_ENCODE_CHAR[e>>>2]+BASE64_ENCODE_CHAR[63&(e<<4|t>>>4)]+BASE64_ENCODE_CHAR[63&(t<<2|n>>>6)]+BASE64_ENCODE_CHAR[63&n];return e=r[i],o+(BASE64_ENCODE_CHAR[e>>>2]+BASE64_ENCODE_CHAR[e<<4&63]+"==")};var exports=createMethod();COMMON_JS?module.exports=exports:(root.md5=exports,AMD&&(__WEBPACK_AMD_DEFINE_RESULT__=function(){return exports}.call(exports,__webpack_require__,exports,module),void 0===__WEBPACK_AMD_DEFINE_RESULT__||(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)))})()},6860:e=>{var t=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}},n=function(e,t,n){var o={};return t.getAllResponseHeaders().trim().split("\n").forEach((function(e){if(e){var t=e.indexOf(":"),n=e.substr(0,t).trim().toLowerCase(),r=e.substr(t+1).trim();o[n]=r}})),{error:e,statusCode:t.status,statusMessage:t.statusText,headers:o,body:n}},o=function(e,t){return t||"text"!==t?e.response:e.responseText};e.exports=function(e,r){var i,a,s,c=(e.method||"GET").toUpperCase(),u=e.url;if(e.qs){var l=(i=e.qs,a=a||"&",s=s||"=",null===i&&(i=void 0),"object"==typeof i?Object.keys(i).map((function(e){var n=encodeURIComponent(t(e))+s;return Array.isArray(i[e])?i[e].map((function(e){return n+encodeURIComponent(t(e))})).join(a):n+encodeURIComponent(t(i[e]))})).filter(Boolean).join(a):"");l&&(u+=(-1===u.indexOf("?")?"?":"&")+l)}var d=new XMLHttpRequest;d.open(c,u,!0),d.responseType=e.dataType||"text";var h=e.headers;if(h)for(var f in h)h.hasOwnProperty(f)&&"content-length"!==f.toLowerCase()&&"user-agent"!==f.toLowerCase()&&"origin"!==f.toLowerCase()&&"host"!==f.toLowerCase()&&d.setRequestHeader(f,h[f]);return e.onProgress&&d.upload&&(d.upload.onprogress=e.onProgress),e.onDownloadProgress&&(d.onprogress=e.onDownloadProgress),d.onload=function(){r(n(null,d,o(d,e.dataType)))},d.onerror=function(t){var i=o(d,e.dataType);if(i)r(n(null,d,i));else{var a=d.statusText;a||0!==d.status||(a=new Error("CORS blocked or network error")),r(n(a,d,i))}},d.send(e.body||""),d}},7509:(e,t,n)=>{var o=n(6150).a,r=function(){this.version="1.3.5";var e={mergeCDATA:!0,normalize:!0,stripElemPrefix:!0},t=new RegExp(/(?!xmlns)^.*:/);return new RegExp(/^\s+|\s+$/g),this.grokType=function(e){return/^\s*$/.test(e)?null:/^(?:true|false)$/i.test(e)?"true"===e.toLowerCase():isFinite(e)?parseFloat(e):e},this.parseString=function(e,t){if(e){var n=this.stringToXML(e);return n.getElementsByTagName("parsererror").length?null:this.parseXML(n,t)}return null},this.parseXML=function(n,o){for(var i in o)e[i]=o[i];var a={},s=0,c="";if(n.childNodes.length)for(var u,l,d,h=0;h<n.childNodes.length;h++)4===(u=n.childNodes.item(h)).nodeType?e.mergeCDATA&&(c+=u.nodeValue):3===u.nodeType?c+=u.nodeValue:1===u.nodeType&&(0===s&&(a={}),l=e.stripElemPrefix?u.nodeName.replace(t,""):u.nodeName,d=r.parseXML(u),a.hasOwnProperty(l)?(a[l].constructor!==Array&&(a[l]=[a[l]]),a[l].push(d)):(a[l]=d,s++));return Object.keys(a).length||(a=c||""),a},this.xmlToString=function(e){try{return e.xml?e.xml:(new XMLSerializer).serializeToString(e)}catch(e){return null}},this.stringToXML=function(e){try{var t=null;return window.DOMParser?t=(new o).parseFromString(e,"text/xml"):((t=new ActiveXObject("Microsoft.XMLDOM")).async=!1,t.loadXML(e),t)}catch(e){return null}},this}.call({});e.exports=function(e){return r.parseString(e)}},6044:(e,t,n)=>{var o=n(1718),r=n(1660),i=n(9589).EventProxy,a=n(1728);function s(e,t){var n=e.TaskId,s=e.Bucket,l=e.Region,d=e.Key,h=e.StorageClass,f=this,p={},g=e.FileSize,m=e.SliceSize,y=Math.ceil(g/m),C=0,v=a.throttleOnProgress.call(f,g,e.onHashProgress),k=new i;k.on("error",(function(e){if(f._isRunningTask(n))return t(e)})),k.on("upload_id_available",(function(e){var n={},o=[];a.each(e.PartList,(function(e){n[e.PartNumber]=e}));for(var r=1;r<=y;r++){var i=n[r];i?(i.PartNumber=r,i.Uploaded=!0):i={PartNumber:r,ETag:null,Uploaded:!1},o.push(i)}e.PartList=o,t(null,e)})),k.on("no_available_upload_id",(function(){if(f._isRunningTask(n)){var o=a.extend({Bucket:s,Region:l,Key:d,Headers:a.clone(e.Headers),Query:a.clone(e.Query),StorageClass:h,Body:e.Body},e);f.multipartInit(o,(function(e,o){if(f._isRunningTask(n)){if(e)return k.emit("error",e);var r=o.UploadId;if(!r)return t(a.error(new Error("no such upload id")));k.emit("upload_id_available",{UploadId:r,PartList:[]})}}))}})),k.on("has_and_check_upload_id",(function(t){t=t.reverse(),r.eachLimit(t,1,(function(t,r){f._isRunningTask(n)&&(o.using[t]?r():u.call(f,{Bucket:s,Region:l,Key:d,UploadId:t},(function(i,s){if(f._isRunningTask(n)){if(i)return o.removeUsing(t),k.emit("error",i);var c=s.PartList;c.forEach((function(e){e.PartNumber*=1,e.Size*=1,e.ETag=e.ETag||""})),function(t,n){var o=t.length;if(0===o)return n(null,!0);if(o>y)return n(null,!1);if(o>1&&Math.max(t[0].Size,t[1].Size)!==m)return n(null,!1);var r=function(i){if(i<o){var s=t[i];!function(t,n){var o=m*(t-1),r=Math.min(o+m,g),i=r-o;p[t]?n(0,{PartNumber:t,ETag:p[t],Size:i}):a.fileSlice(e.Body,o,r,!1,(function(e){a.getFileMd5(e,(function(e,o){if(e)return n(a.error(e));var r='"'+o+'"';p[t]=r,v({loaded:C+=i,total:g}),n(0,{PartNumber:t,ETag:r,Size:i})}))}))}(s.PartNumber,(function(e,t){t&&t.ETag===s.ETag&&t.Size===s.Size?r(i+1):n(null,!1)}))}else n(null,!0)};r(0)}(c,(function(e,o){if(f._isRunningTask(n))return e?k.emit("error",e):void(o?r({UploadId:t,PartList:c}):r())}))}})))}),(function(e){f._isRunningTask(n)&&(v(null,!0),e&&e.UploadId?k.emit("upload_id_available",e):k.emit("no_available_upload_id"))}))})),k.on("seek_local_avail_upload_id",(function(t){var r=o.getFileId(e.Body,e.ChunkSize,s,d),i=o.getUploadIdList.call(f,r);if(r&&i){var c=function(e){if(e>=i.length)k.emit("has_and_check_upload_id",t);else{var r=i[e];if(!a.isInArray(t,r))return o.removeUploadId.call(f,r),void c(e+1);o.using[r]?c(e+1):u.call(f,{Bucket:s,Region:l,Key:d,UploadId:r},(function(t,i){f._isRunningTask(n)&&(t?(o.removeUploadId.call(f,r),c(e+1)):k.emit("upload_id_available",{UploadId:r,PartList:i.PartList}))}))}};c(0)}else k.emit("has_and_check_upload_id",t)})),k.on("get_remote_upload_id_list",(function(){c.call(f,{Bucket:s,Region:l,Key:d},(function(t,r){if(f._isRunningTask(n)){if(t)return k.emit("error",t);var i=a.filter(r.UploadList,(function(e){return e.Key===d&&(!h||e.StorageClass.toUpperCase()===h.toUpperCase())})).reverse().map((function(e){return e.UploadId||e.UploadID}));if(i.length)k.emit("seek_local_avail_upload_id",i);else{var c,u=o.getFileId(e.Body,e.ChunkSize,s,d);u&&(c=o.getUploadIdList.call(f,u))&&a.each(c,(function(e){o.removeUploadId.call(f,e)})),k.emit("no_available_upload_id")}}}))})),k.emit("get_remote_upload_id_list")}function c(e,t){var n=this,o=[],r={Bucket:e.Bucket,Region:e.Region,Prefix:e.Key},i=function(){n.multipartList(r,(function(e,n){if(e)return t(e);o.push.apply(o,n.Upload||[]),"true"===n.IsTruncated?(r.KeyMarker=n.NextKeyMarker,r.UploadIdMarker=n.NextUploadIdMarker,i()):t(null,{UploadList:o})}))};i()}function u(e,t){var n=this,o=[],r={Bucket:e.Bucket,Region:e.Region,Key:e.Key,UploadId:e.UploadId},i=function(){n.multipartListPart(r,(function(e,n){if(e)return t(e);o.push.apply(o,n.Part||[]),"true"===n.IsTruncated?(r.PartNumberMarker=n.NextPartNumberMarker,i()):t(null,{PartList:o})}))};i()}function l(e,t){var n=this,o=e.TaskId,i=e.Bucket,s=e.Region,c=e.Key,u=e.UploadData,l=e.FileSize,h=e.SliceSize,f=Math.min(e.AsyncLimit||n.options.ChunkParallelLimit||1,256),p=e.Body,g=Math.ceil(l/h),m=0,y=e.ServerSideEncryption,C=a.filter(u.PartList,(function(e){return e.Uploaded&&(m+=e.PartNumber>=g&&l%h||h),!e.Uploaded})),v=e.onProgress;r.eachLimit(C,f,(function(e,t){if(n._isRunningTask(o)){var r=e.PartNumber,a=Math.min(l,e.PartNumber*h)-(e.PartNumber-1)*h,f=0;d.call(n,{TaskId:o,Bucket:i,Region:s,Key:c,SliceSize:h,FileSize:l,PartNumber:r,ServerSideEncryption:y,Body:p,UploadData:u,onProgress:function(e){m+=e.loaded-f,f=e.loaded,v({loaded:m,total:l})}},(function(r,i){n._isRunningTask(o)&&(r||i.ETag||(r='get ETag error, please add "ETag" to CORS ExposeHeader setting.( 获取ETag失败，请在CORS ExposeHeader设置中添加ETag，请参考文档：https://cloud.tencent.com/document/product/436/13318 )'),r?m-=f:(m+=a-f,e.ETag=i.ETag),v({loaded:m,total:l}),t(r||null,i))}))}}),(function(e){if(n._isRunningTask(o))return e?t(e):void t(null,{UploadId:u.UploadId,SliceList:u.PartList})}))}function d(e,t){var n=this,o=e.TaskId,i=e.Bucket,s=e.Region,c=e.Key,u=e.FileSize,l=e.Body,d=1*e.PartNumber,h=e.SliceSize,f=e.ServerSideEncryption,p=e.UploadData,g=n.options.ChunkRetryTimes+1,m=h*(d-1),y=h,C=m+h;C>u&&(y=(C=u)-m);var v=p.PartList[d-1];r.retry(g,(function(t){n._isRunningTask(o)&&a.fileSlice(l,m,C,!0,(function(r){n.multipartUpload({TaskId:o,Bucket:i,Region:s,Key:c,ContentLength:y,PartNumber:d,UploadId:p.UploadId,ServerSideEncryption:f,Body:r,onProgress:e.onProgress},(function(e,r){if(n._isRunningTask(o))return e?t(e):(v.Uploaded=!0,t(null,r))}))}))}),(function(e,r){if(n._isRunningTask(o))return t(e,r)}))}function h(e,t){var n=e.Bucket,o=e.Region,i=e.Key,a=e.UploadId,s=e.SliceList,c=this,u=this.options.ChunkRetryTimes+1,l=e.Headers,d=s.map((function(e){return{PartNumber:e.PartNumber,ETag:e.ETag}}));r.retry(u,(function(e){c.multipartComplete({Bucket:n,Region:o,Key:i,UploadId:a,Parts:d,Headers:l},e)}),(function(e,n){t(e,n)}))}function f(e,t){var n=e.Bucket,o=e.Region,i=e.Key,a=e.AbortArray,s=e.AsyncLimit||1,c=this,u=0,l=new Array(a.length);r.eachLimit(a,s,(function(t,r){var a=u;if(i&&i!==t.Key)return l[a]={error:{KeyNotMatch:!0}},void r(null);var s=t.UploadId||t.UploadID;c.multipartAbort({Bucket:n,Region:o,Key:t.Key,Headers:e.Headers,UploadId:s},(function(e){var i={Bucket:n,Region:o,Key:t.Key,UploadId:s};l[a]={error:e,task:i},r(null)})),u++}),(function(e){if(e)return t(e);for(var n=[],o=[],r=0,i=l.length;r<i;r++){var a=l[r];a.task&&(a.error?o.push(a.task):n.push(a.task))}return t(null,{successList:n,errorList:o})}))}function p(e,t){var n=e.TaskId,o=e.Bucket,i=e.Region,a=e.Key,s=e.CopySource,c=e.UploadId,u=1*e.PartNumber,l=e.CopySourceRange,d=this.options.ChunkRetryTimes+1,h=this;r.retry(d,(function(e){h.uploadPartCopy({TaskId:n,Bucket:o,Region:i,Key:a,CopySource:s,UploadId:c,PartNumber:u,CopySourceRange:l},(function(t,n){e(t||null,n)}))}),(function(e,n){return t(e,n)}))}var g={sliceUploadFile:function(e,t){var n,r,c=this,u=new i,d=e.TaskId,f=e.Bucket,p=e.Region,g=e.Key,m=e.Body,y=e.ChunkSize||e.SliceSize||c.options.ChunkSize,C=e.AsyncLimit,v=e.StorageClass,k=e.ServerSideEncryption,S=e.onHashProgress;u.on("error",(function(n){if(c._isRunningTask(d)){var o=a.extend({UploadId:e.UploadData.UploadId||""},n);return t(o)}})),u.on("upload_complete",(function(n){var o=a.extend({UploadId:e.UploadData.UploadId||""},n);t(null,o)})),u.on("upload_slice_complete",(function(t){var i={};a.each(e.Headers,(function(e,t){var n=t.toLowerCase();0!==n.indexOf("x-cos-meta-")&&"pic-operations"!==n||(i[t]=e)})),h.call(c,{Bucket:f,Region:p,Key:g,UploadId:t.UploadId,SliceList:t.SliceList,Headers:i},(function(e,i){if(c._isRunningTask(d)){if(o.removeUsing(t.UploadId),e)return r(null,!0),u.emit("error",e);o.removeUploadId.call(c,t.UploadId),r({loaded:n,total:n},!0),u.emit("upload_complete",i)}}))})),u.on("get_upload_data_finish",(function(t){var i=o.getFileId(m,e.ChunkSize,f,g);i&&o.saveUploadId.call(c,i,t.UploadId,c.options.UploadIdCacheLimit),o.setUsing(t.UploadId),r(null,!0),l.call(c,{TaskId:d,Bucket:f,Region:p,Key:g,Body:m,FileSize:n,SliceSize:y,AsyncLimit:C,ServerSideEncryption:k,UploadData:t,onProgress:r},(function(e,t){if(c._isRunningTask(d))return e?(r(null,!0),u.emit("error",e)):void u.emit("upload_slice_complete",t)}))})),u.on("get_file_size_finish",(function(){if(r=a.throttleOnProgress.call(c,n,e.onProgress),e.UploadData.UploadId)u.emit("get_upload_data_finish",e.UploadData);else{var t=a.extend({TaskId:d,Bucket:f,Region:p,Key:g,Headers:e.Headers,StorageClass:v,Body:m,FileSize:n,SliceSize:y,onHashProgress:S},e);s.call(c,t,(function(t,n){if(c._isRunningTask(d)){if(t)return u.emit("error",t);e.UploadData.UploadId=n.UploadId,e.UploadData.PartList=n.PartList,u.emit("get_upload_data_finish",e.UploadData)}}))}})),n=e.ContentLength,delete e.ContentLength,!e.Headers&&(e.Headers={}),a.each(e.Headers,(function(t,n){"content-length"===n.toLowerCase()&&delete e.Headers[n]})),function(){for(var t=[1,2,4,8,16,32,64,128,256,512,1024,2048,4096,5120],o=1048576,r=0;r<t.length&&!(n/(o=1024*t[r]*1024)<=c.options.MaxPartNumber);r++);e.ChunkSize=e.SliceSize=y=Math.max(y,o)}(),0===n?(e.Body="",e.ContentLength=0,e.SkipTask=!0,c.putObject(e,t)):u.emit("get_file_size_finish")},abortUploadTask:function(e,t){var n=e.Bucket,o=e.Region,r=e.Key,s=e.UploadId,u=e.Level||"task",l=e.AsyncLimit,d=this,h=new i;if(h.on("error",(function(e){return t(e)})),h.on("get_abort_array",(function(i){f.call(d,{Bucket:n,Region:o,Key:r,Headers:e.Headers,AsyncLimit:l,AbortArray:i},t)})),"bucket"===u)c.call(d,{Bucket:n,Region:o},(function(e,n){if(e)return t(e);h.emit("get_abort_array",n.UploadList||[])}));else if("file"===u){if(!r)return t(a.error(new Error("abort_upload_task_no_key")));c.call(d,{Bucket:n,Region:o,Key:r},(function(e,n){if(e)return t(e);h.emit("get_abort_array",n.UploadList||[])}))}else{if("task"!==u)return t(a.error(new Error("abort_unknown_level")));if(!s)return t(a.error(new Error("abort_upload_task_no_id")));if(!r)return t(a.error(new Error("abort_upload_task_no_key")));h.emit("get_abort_array",[{Key:r,UploadId:s}])}},uploadFile:function(e,t){var n=void 0===e.SliceSize?this.options.SliceSize:e.SliceSize,o=[],r=e.Body,i=r.size||r.length||0,s={TaskId:""};a.each(e,(function(e,t){"object"!=typeof e&&"function"!=typeof e&&(s[t]=e)}));var c=e.onTaskReady;e.onTaskReady=function(e){s.TaskId=e,c&&c(e)};var u=e.onFileFinish,l=i>n?"sliceUploadFile":"putObject";o.push({api:l,params:e,callback:function(e,n){u&&u(e,n,s),t&&t(e,n)}}),this._addTasks(o)},uploadFiles:function(e,t){var n=this,o=void 0===e.SliceSize?n.options.SliceSize:e.SliceSize,r=0,i=0,s=a.throttleOnProgress.call(n,i,e.onProgress),c=e.files.length,u=e.onFileFinish,l=Array(c),d=function(e,n,o){s(null,!0),u&&u(e,n,o),l[o.Index]={options:o,error:e,data:n},--c<=0&&t&&t(null,{files:l})},h=[];a.each(e.files,(function(e,t){!function(){var n=e.Body,c=n.size||n.length||0,u={Index:t,TaskId:""};r+=c,a.each(e,(function(e,t){"object"!=typeof e&&"function"!=typeof e&&(u[t]=e)}));var l=e.onTaskReady;e.onTaskReady=function(e){u.TaskId=e,l&&l(e)};var f=0,p=e.onProgress;e.onProgress=function(e){i=i-f+e.loaded,f=e.loaded,p&&p(e),s({loaded:i,total:r})};var g=e.onFileFinish,m=c>o?"sliceUploadFile":"putObject";h.push({api:m,params:e,callback:function(e,t){g&&g(e,t),d&&d(e,t,u)}})}()})),n._addTasks(h)},sliceCopyFile:function(e,t){var n=new i,o=this,s=e.Bucket,c=e.Region,u=e.Key,l=e.CopySource,d=l.match(/^([^.]+-\d+)\.cos(v6)?\.([^.]+)\.[^/]+\/(.+)$/);if(d){var h=d[1],f=d[3],g=decodeURIComponent(d[4]),m=void 0===e.CopySliceSize?o.options.CopySliceSize:e.CopySliceSize;m=Math.max(0,m);var y,C,v=e.CopyChunkSize||this.options.CopyChunkSize,k=this.options.CopyChunkParallelLimit,S=0;n.on("copy_slice_complete",(function(n){var r={};a.each(e.Headers,(function(e,t){0===t.toLowerCase().indexOf("x-cos-meta-")&&(r[t]=e)}));var i=a.map(n.PartList,(function(e){return{PartNumber:e.PartNumber,ETag:e.ETag}}));o.multipartComplete({Bucket:s,Region:c,Key:u,UploadId:n.UploadId,Parts:i},(function(e,n){if(e)return C(null,!0),t(e);C({loaded:y,total:y},!0),t(null,n)}))})),n.on("get_copy_data_finish",(function(e){r.eachLimit(e.PartList,k,(function(t,n){var r=t.PartNumber,i=t.CopySourceRange,a=t.end-t.start;p.call(o,{Bucket:s,Region:c,Key:u,CopySource:l,UploadId:e.UploadId,PartNumber:r,CopySourceRange:i},(function(e,o){if(e)return n(e);C({loaded:S+=a,total:y}),t.ETag=o.ETag,n(e||null,o)}))}),(function(o){if(o)return C(null,!0),t(o);n.emit("copy_slice_complete",e)}))})),n.on("get_file_size_finish",(function(r){var i;if(function(){for(var t=[1,2,4,8,16,32,64,128,256,512,1024,2048,4096,5120],n=1048576,r=0;r<t.length&&!(y/(n=1024*t[r]*1024)<=o.options.MaxPartNumber);r++);e.ChunkSize=v=Math.max(v,n);for(var i=Math.ceil(y/v),a=[],s=1;s<=i;s++){var c=(s-1)*v,u=s*v<y?s*v-1:y-1,l={PartNumber:s,start:c,end:u,CopySourceRange:"bytes="+c+"-"+u};a.push(l)}e.PartList=a}(),(i="Replaced"===e.Headers["x-cos-metadata-directive"]?e.Headers:r)["x-cos-storage-class"]=e.Headers["x-cos-storage-class"]||r["x-cos-storage-class"],i=a.clearKey(i),"ARCHIVE"===r["x-cos-storage-class"]||"DEEP_ARCHIVE"===r["x-cos-storage-class"]){var l=r["x-cos-restore"];if(!l||'ongoing-request="true"'===l)return void t(a.error(new Error("Unrestored archive object is not allowed to be copied")))}delete i["x-cos-copy-source"],delete i["x-cos-metadata-directive"],delete i["x-cos-copy-source-If-Modified-Since"],delete i["x-cos-copy-source-If-Unmodified-Since"],delete i["x-cos-copy-source-If-Match"],delete i["x-cos-copy-source-If-None-Match"],o.multipartInit({Bucket:s,Region:c,Key:u,Headers:i},(function(o,r){if(o)return t(o);e.UploadId=r.UploadId,n.emit("get_copy_data_finish",e)}))})),o.headObject({Bucket:h,Region:f,Key:g},(function(r,i){if(r)r.statusCode&&404===r.statusCode?t(a.error(r,{ErrorStatus:g+" Not Exist"})):t(r);else if(void 0!==(y=e.FileSize=i.headers["content-length"])&&y)if(C=a.throttleOnProgress.call(o,y,e.onProgress),y<=m)e.Headers["x-cos-metadata-directive"]||(e.Headers["x-cos-metadata-directive"]="Copy"),o.putObjectCopy(e,(function(e,n){if(e)return C(null,!0),t(e);C({loaded:y,total:y},!0),t(e,n)}));else{var s=i.headers,c={"Cache-Control":s["cache-control"],"Content-Disposition":s["content-disposition"],"Content-Encoding":s["content-encoding"],"Content-Type":s["content-type"],Expires:s.expires,"x-cos-storage-class":s["x-cos-storage-class"]};a.each(s,(function(e,t){var n="x-cos-meta-";0===t.indexOf(n)&&t.length>n.length&&(c[t]=e)})),n.emit("get_file_size_finish",c)}else t(a.error(new Error('get Content-Length error, please add "Content-Length" to CORS ExposeHeader setting.（ 获取Content-Length失败，请在CORS ExposeHeader设置中添加Content-Length，请参考文档：https://cloud.tencent.com/document/product/436/13318 ）')))}))}else t(a.error(new Error("CopySource format error")))}};e.exports.init=function(e,t){t.transferToTaskMethod(g,"sliceUploadFile"),a.each(g,(function(t,n){e.prototype[n]=a.apiWrapper(n,t)}))}},1660:e=>{e.exports={eachLimit:function(e,t,n,o){if(o=o||function(){},!e.length||t<=0)return o();var r=0,i=0,a=0;!function s(){if(r>=e.length)return o();for(;a<t&&i<e.length;)a+=1,n(e[(i+=1)-1],(function(t){t?(o(t),o=function(){}):(a-=1,(r+=1)>=e.length?o():s())}))}()},retry:function(e,t,n){var o=function(r){t((function(t,i){t&&r<e?o(r+1):n(t,i)}))};e<1?n():o(1)}}},4257:(e,t,n)=>{var o=n(6860),r=n(1728);function i(e){var t={GrantFullControl:[],GrantWrite:[],GrantRead:[],GrantReadAcp:[],GrantWriteAcp:[],ACL:""},n={FULL_CONTROL:"GrantFullControl",WRITE:"GrantWrite",READ:"GrantRead",READ_ACP:"GrantReadAcp",WRITE_ACP:"GrantWriteAcp"},o=(e&&e.AccessControlList||{}).Grant;o&&(o=r.isArray(o)?o:[o]);var i={READ:0,WRITE:0,FULL_CONTROL:0};return o&&o.length&&r.each(o,(function(o){"qcs::cam::anyone:anyone"===o.Grantee.ID||"http://cam.qcloud.com/groups/global/AllUsers"===o.Grantee.URI?i[o.Permission]=1:o.Grantee.ID!==e.Owner.ID&&t[n[o.Permission]].push('id="'+o.Grantee.ID+'"')})),i.FULL_CONTROL||i.WRITE&&i.READ?t.ACL="public-read-write":i.READ?t.ACL="public-read":t.ACL="private",r.each(n,(function(e){t[e]=a(t[e].join(","))})),t}function a(e){var t,n,o=e.split(","),r={};for(t=0;t<o.length;)r[n=o[t].trim()]?o.splice(t,1):(r[n]=!0,o[t]=n,t++);return o.join(",")}function s(e){var t=e.bucket,n=t.substr(0,t.lastIndexOf("-")),o=t.substr(t.lastIndexOf("-")+1),i=e.domain,a=e.region,s=e.object,c=e.protocol||(r.isBrowser&&"http:"===location.protocol?"http:":"https:");i||(i=["cn-south","cn-south-2","cn-north","cn-east","cn-southwest","sg"].indexOf(a)>-1?"{Region}.myqcloud.com":"cos.{Region}.myqcloud.com",e.ForcePathStyle||(i="{Bucket}."+i)),i=(i=i.replace(/\{\{AppId\}\}/gi,o).replace(/\{\{Bucket\}\}/gi,n).replace(/\{\{Region\}\}/gi,a).replace(/\{\{.*?\}\}/gi,"")).replace(/\{AppId\}/gi,o).replace(/\{BucketName\}/gi,n).replace(/\{Bucket\}/gi,t).replace(/\{Region\}/gi,a).replace(/\{.*?\}/gi,""),/^[a-zA-Z]+:\/\//.test(i)||(i=c+"//"+i),"/"===i.slice(-1)&&(i=i.slice(0,-1));var u=i;return e.ForcePathStyle&&(u+="/"+t),u+="/",s&&(u+=r.camSafeUrlEncode(s).replace(/%2F/g,"/")),e.isLocation&&(u=u.replace(/^https?:\/\//,"")),u}function c(e,t){var n=r.clone(e.Headers);r.each(n,(function(e,t){(""===e||["content-type","cache-control","expires"].indexOf(t.toLowerCase())>-1)&&delete n[t]}));var o=!1,i=function(e,n){o||(o=!0,n&&n.XCosSecurityToken&&!n.SecurityToken&&((n=r.clone(n)).SecurityToken=n.XCosSecurityToken,delete n.XCosSecurityToken),t&&t(e,n))},a=this,s=e.Bucket||"",c=e.Region||"",u=e.Key||"";a.options.ForcePathStyle&&s&&(u=s+"/"+u);var l="/"+u,d={},h=e.Scope;if(!h){var f=e.Action||"",p=e.ResourceKey||e.Key||"";h=e.Scope||[{action:f,bucket:s,region:c,prefix:p}]}var g=r.md5(JSON.stringify(h));a._StsCache=a._StsCache||[],function(){var e,t;for(e=a._StsCache.length-1;e>=0;e--){t=a._StsCache[e];var n=Math.round(r.getSkewTime(a.options.SystemClockOffset)/1e3)+30;if(t.StartTime&&n<t.StartTime||n>=t.ExpiredTime)a._StsCache.splice(e,1);else if(!t.ScopeLimit||t.ScopeLimit&&t.ScopeKey===g){d=t;break}}}();var m,y=function(){var t=d.StartTime&&d.ExpiredTime?d.StartTime+";"+d.ExpiredTime:"",o={Authorization:r.getAuth({SecretId:d.TmpSecretId,SecretKey:d.TmpSecretKey,Method:e.Method,Pathname:l,Query:e.Query,Headers:n,Expires:e.Expires,UseRawKey:a.options.UseRawKey,SystemClockOffset:a.options.SystemClockOffset,KeyTime:t}),SecurityToken:d.SecurityToken||d.XCosSecurityToken||"",Token:d.Token||"",ClientIP:d.ClientIP||"",ClientUA:d.ClientUA||""};i(null,o)},C=function(e){if(e.Authorization){var t=!1,n=e.Authorization;if(n)if(n.indexOf(" ")>-1)t=!1;else if(n.indexOf("q-sign-algorithm=")>-1&&n.indexOf("q-ak=")>-1&&n.indexOf("q-sign-time=")>-1&&n.indexOf("q-key-time=")>-1&&n.indexOf("q-url-param-list=")>-1)t=!0;else try{(n=atob(n)).indexOf("a=")>-1&&n.indexOf("k=")>-1&&n.indexOf("t=")>-1&&n.indexOf("r=")>-1&&n.indexOf("b=")>-1&&(t=!0)}catch(e){}if(!t)return r.error(new Error("getAuthorization callback params format error"))}else{if(!e.TmpSecretId)return r.error(new Error('getAuthorization callback params missing "TmpSecretId"'));if(!e.TmpSecretKey)return r.error(new Error('getAuthorization callback params missing "TmpSecretKey"'));if(!e.SecurityToken&&!e.XCosSecurityToken)return r.error(new Error('getAuthorization callback params missing "SecurityToken"'));if(!e.ExpiredTime)return r.error(new Error('getAuthorization callback params missing "ExpiredTime"'));if(e.ExpiredTime&&10!==e.ExpiredTime.toString().length)return r.error(new Error('getAuthorization callback params "ExpiredTime" should be 10 digits'));if(e.StartTime&&10!==e.StartTime.toString().length)return r.error(new Error('getAuthorization callback params "StartTime" should be 10 StartTime'))}return!1};if(d.ExpiredTime&&d.ExpiredTime-r.getSkewTime(a.options.SystemClockOffset)/1e3>60)y();else if(a.options.getAuthorization)a.options.getAuthorization.call(a,{Bucket:s,Region:c,Method:e.Method,Key:u,Pathname:l,Query:e.Query,Headers:n,Scope:h,SystemClockOffset:a.options.SystemClockOffset},(function(e){"string"==typeof e&&(e={Authorization:e});var t=C(e);if(t)return i(t);e.Authorization?i(null,e):((d=e||{}).Scope=h,d.ScopeKey=g,a._StsCache.push(d),y())}));else{if(!a.options.getSTS)return m={Authorization:r.getAuth({SecretId:e.SecretId||a.options.SecretId,SecretKey:e.SecretKey||a.options.SecretKey,Method:e.Method,Pathname:l,Query:e.Query,Headers:n,Expires:e.Expires,UseRawKey:a.options.UseRawKey,SystemClockOffset:a.options.SystemClockOffset}),SecurityToken:a.options.SecurityToken||a.options.XCosSecurityToken},i(null,m),m;a.options.getSTS.call(a,{Bucket:s,Region:c},(function(e){(d=e||{}).Scope=h,d.ScopeKey=g,d.TmpSecretId||(d.TmpSecretId=d.SecretId),d.TmpSecretKey||(d.TmpSecretKey=d.SecretKey);var t=C(d);if(t)return i(t);a._StsCache.push(d),y()}))}return""}function u(e){var t=!1,n=!1,o=e.headers&&(e.headers.date||e.headers.Date)||e.error&&e.error.ServerTime;try{var i=e.error.Code,a=e.error.Message;("RequestTimeTooSkewed"===i||"AccessDenied"===i&&"Request has expired"===a)&&(n=!0)}catch(e){}if(e)if(n&&o){var s=Date.parse(o);this.options.CorrectClockSkew&&Math.abs(r.getSkewTime(this.options.SystemClockOffset)-s)>=3e4&&(console.error("error: Local time is too skewed."),this.options.SystemClockOffset=s-Date.now(),t=!0)}else 5===Math.floor(e.statusCode/100)&&(t=!0);return t}function l(e,t){var n=this;!e.headers&&(e.headers={}),!e.qs&&(e.qs={}),e.VersionId&&(e.qs.versionId=e.VersionId),e.qs=r.clearKey(e.qs),e.headers&&(e.headers=r.clearKey(e.headers)),e.qs&&(e.qs=r.clearKey(e.qs));var o=r.clone(e.qs);e.action&&(o[e.action]="");var i=function(r){var a=n.options.SystemClockOffset;c.call(n,{Bucket:e.Bucket||"",Region:e.Region||"",Method:e.method,Key:e.Key,Query:o,Headers:e.headers,Action:e.Action,ResourceKey:e.ResourceKey,Scope:e.Scope},(function(o,s){o?t(o):(e.AuthData=s,d.call(n,e,(function(o,s){o&&r<2&&(a!==n.options.SystemClockOffset||u.call(n,o))?(e.headers&&(delete e.headers.Authorization,delete e.headers.token,delete e.headers.clientIP,delete e.headers.clientUA,delete e.headers["x-cos-security-token"]),i(r+1)):t(o,s)})))}))};i(1)}function d(e,t){var n=this,i=e.TaskId;if(!i||n._isRunningTask(i)){var a=e.Bucket,c=e.Region,u=e.Key,l=e.method||"GET",d=e.url,h=e.body,f=e.rawBody;n.options.UseAccelerate&&(c="accelerate"),d=d||s({ForcePathStyle:n.options.ForcePathStyle,protocol:n.options.Protocol,domain:n.options.Domain,bucket:a,region:c,object:u}),e.action&&(d=d+"?"+e.action),e.qsStr&&(d=d.indexOf("?")>-1?d+"&"+e.qsStr:d+"?"+e.qsStr);var p={method:l,url:d,headers:e.headers,qs:e.qs,body:h};if(p.headers.Authorization=e.AuthData.Authorization,e.AuthData.Token&&(p.headers.token=e.AuthData.Token),e.AuthData.ClientIP&&(p.headers.clientIP=e.AuthData.ClientIP),e.AuthData.ClientUA&&(p.headers.clientUA=e.AuthData.ClientUA),e.AuthData.SecurityToken&&(p.headers["x-cos-security-token"]=e.AuthData.SecurityToken),p.headers&&(p.headers=r.clearKey(p.headers)),p=r.clearKey(p),e.onProgress&&"function"==typeof e.onProgress){var g=h&&(h.size||h.length)||0;p.onProgress=function(t){if(!i||n._isRunningTask(i)){var o=t?t.loaded:0;e.onProgress({loaded:o,total:g})}}}e.onDownloadProgress&&(p.onDownloadProgress=e.onDownloadProgress),e.DataType&&(p.dataType=e.DataType),this.options.Timeout&&(p.timeout=this.options.Timeout),n.options.ForcePathStyle&&(p.pathStyle=n.options.ForcePathStyle),n.emit("before-send",p);var m=(n.options.Request||o)(p,(function(e){if("abort"!==e.error){n.emit("after-receive",e);var o,a={statusCode:e.statusCode,statusMessage:e.statusMessage,headers:e.headers},s=e.error,c=e.body,u=function(e,s){if(i&&n.off("inner-kill-task",y),!o){o=!0;var c={};a&&a.statusCode&&(c.statusCode=a.statusCode),a&&a.headers&&(c.headers=a.headers),e?(e=r.extend(e||{},c),t(e,null)):(s=r.extend(s||{},c),t(null,s)),m=null}};if(s)return u(r.error(s));var l,d=a.statusCode,h=2===Math.floor(d/100);if(f&&h)return u(null,{body:c});try{l=c&&c.indexOf("<")>-1&&c.indexOf(">")>-1&&r.xml2json(c)||{}}catch(e){l={}}var p=l&&l.Error;h?u(null,l):p?u(r.error(new Error(p.Message),{code:p.Code,error:p})):d?u(r.error(new Error(a.statusMessage),{code:""+d})):d&&u(r.error(new Error("statusCode error")))}})),y=function(e){e.TaskId===i&&(m&&m.abort&&m.abort(),n.off("inner-kill-task",y))};i&&n.on("inner-kill-task",y)}}var h={getService:function(e,t){"function"==typeof e&&(t=e,e={});var n=this.options.Protocol||(r.isBrowser&&"http:"===location.protocol?"http:":"https:"),o=this.options.ServiceDomain,i=e.AppId||this.options.appId,a=e.Region;o?(o=o.replace(/\{\{AppId\}\}/gi,i||"").replace(/\{\{Region\}\}/gi,a||"").replace(/\{\{.*?\}\}/gi,""),/^[a-zA-Z]+:\/\//.test(o)||(o=n+"//"+o),"/"===o.slice(-1)&&(o=o.slice(0,-1))):o=a?n+"//cos."+a+".myqcloud.com":n+"//service.cos.myqcloud.com",l.call(this,{Action:"name/cos:GetService",url:o,method:"GET",headers:e.Headers},(function(e,n){if(e)return t(e);var o=n&&n.ListAllMyBucketsResult&&n.ListAllMyBucketsResult.Buckets&&n.ListAllMyBucketsResult.Buckets.Bucket||[];o=r.isArray(o)?o:[o];var i=n&&n.ListAllMyBucketsResult&&n.ListAllMyBucketsResult.Owner||{};t(null,{Buckets:o,Owner:i,statusCode:n.statusCode,headers:n.headers})}))},putBucket:function(e,t){var n=this,o="";if(e.BucketAZConfig){var i={BucketAZConfig:e.BucketAZConfig};o=r.json2xml({CreateBucketConfiguration:i})}l.call(this,{Action:"name/cos:PutBucket",method:"PUT",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,body:o},(function(o,r){if(o)return t(o);var i=s({protocol:n.options.Protocol,domain:n.options.Domain,bucket:e.Bucket,region:e.Region,isLocation:!0});t(null,{Location:i,statusCode:r.statusCode,headers:r.headers})}))},headBucket:function(e,t){l.call(this,{Action:"name/cos:HeadBucket",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,method:"HEAD"},t)},getBucket:function(e,t){var n={};n.prefix=e.Prefix||"",n.delimiter=e.Delimiter,n.marker=e.Marker,n["max-keys"]=e.MaxKeys,n["encoding-type"]=e.EncodingType,l.call(this,{Action:"name/cos:GetBucket",ResourceKey:n.prefix,method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,qs:n},(function(e,n){if(e)return t(e);var o=n.ListBucketResult||{},i=o.Contents||[],a=o.CommonPrefixes||[];i=r.isArray(i)?i:[i],a=r.isArray(a)?a:[a];var s=r.clone(o);r.extend(s,{Contents:i,CommonPrefixes:a,statusCode:n.statusCode,headers:n.headers}),t(null,s)}))},deleteBucket:function(e,t){l.call(this,{Action:"name/cos:DeleteBucket",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,method:"DELETE"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketAcl:function(e,t){var n=e.Headers,o="";if(e.AccessControlPolicy){var i=r.clone(e.AccessControlPolicy||{}),s=i.Grants||i.Grant;s=r.isArray(s)?s:[s],delete i.Grant,delete i.Grants,i.AccessControlList={Grant:s},o=r.json2xml({AccessControlPolicy:i}),n["Content-Type"]="application/xml",n["Content-MD5"]=r.binaryBase64(r.md5(o))}r.each(n,(function(e,t){0===t.indexOf("x-cos-grant-")&&(n[t]=a(n[t]))})),l.call(this,{Action:"name/cos:PutBucketACL",method:"PUT",Bucket:e.Bucket,Region:e.Region,headers:n,action:"acl",body:o},(function(e,n){if(e)return t(e);t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketAcl:function(e,t){l.call(this,{Action:"name/cos:GetBucketACL",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"acl"},(function(e,n){if(e)return t(e);var o=n.AccessControlPolicy||{},a=o.Owner||{},s=o.AccessControlList.Grant||[];s=r.isArray(s)?s:[s];var c=i(o);n.headers&&n.headers["x-cos-acl"]&&(c.ACL=n.headers["x-cos-acl"]),c=r.extend(c,{Owner:a,Grants:s,statusCode:n.statusCode,headers:n.headers}),t(null,c)}))},putBucketCors:function(e,t){var n=(e.CORSConfiguration||{}).CORSRules||e.CORSRules||[];n=r.clone(r.isArray(n)?n:[n]),r.each(n,(function(e){r.each(["AllowedOrigin","AllowedHeader","AllowedMethod","ExposeHeader"],(function(t){var n=t+"s",o=e[n]||e[t]||[];delete e[n],e[t]=r.isArray(o)?o:[o]}))}));var o=r.json2xml({CORSConfiguration:{CORSRule:n}}),i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketCORS",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"cors",headers:i},(function(e,n){if(e)return t(e);t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketCors:function(e,t){l.call(this,{Action:"name/cos:GetBucketCORS",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"cors"},(function(e,n){if(e)if(404===e.statusCode&&e.error&&"NoSuchCORSConfiguration"===e.error.Code){var o={CORSRules:[],statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else t(e);else{var i=n.CORSConfiguration||{},a=i.CORSRules||i.CORSRule||[];a=r.clone(r.isArray(a)?a:[a]),r.each(a,(function(e){r.each(["AllowedOrigin","AllowedHeader","AllowedMethod","ExposeHeader"],(function(t){var n=t+"s",o=e[n]||e[t]||[];delete e[t],e[n]=r.isArray(o)?o:[o]}))})),t(null,{CORSRules:a,statusCode:n.statusCode,headers:n.headers})}}))},deleteBucketCors:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketCORS",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"cors"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode||e.statusCode,headers:n.headers})}))},getBucketLocation:function(e,t){l.call(this,{Action:"name/cos:GetBucketLocation",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"location"},t)},getBucketPolicy:function(e,t){l.call(this,{Action:"name/cos:GetBucketPolicy",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"policy",rawBody:!0},(function(e,n){if(e)return e.statusCode&&403===e.statusCode?t(r.error(e,{ErrorStatus:"Access Denied"})):e.statusCode&&405===e.statusCode?t(r.error(e,{ErrorStatus:"Method Not Allowed"})):e.statusCode&&404===e.statusCode?t(r.error(e,{ErrorStatus:"Policy Not Found"})):t(e);var o={};try{o=JSON.parse(n.body)}catch(e){}t(null,{Policy:o,statusCode:n.statusCode,headers:n.headers})}))},putBucketPolicy:function(e,t){var n=e.Policy;try{"string"==typeof n&&(n=JSON.parse(n))}catch(e){}if(!n||"string"==typeof n)return t(r.error(new Error("Policy format error")));var o=JSON.stringify(n);n.version||(n.version="2.0");var i=e.Headers;i["Content-Type"]="application/json",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketPolicy",method:"PUT",Bucket:e.Bucket,Region:e.Region,action:"policy",body:o,headers:i},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},deleteBucketPolicy:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketPolicy",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"policy"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode||e.statusCode,headers:n.headers})}))},putBucketTagging:function(e,t){var n=e.Tagging||{},o=n.TagSet||n.Tags||e.Tags||[];o=r.clone(r.isArray(o)?o:[o]);var i=r.json2xml({Tagging:{TagSet:{Tag:o}}}),a=e.Headers;a["Content-Type"]="application/xml",a["Content-MD5"]=r.binaryBase64(r.md5(i)),l.call(this,{Action:"name/cos:PutBucketTagging",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:i,action:"tagging",headers:a},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketTagging:function(e,t){l.call(this,{Action:"name/cos:GetBucketTagging",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"tagging"},(function(e,n){if(e)if(404!==e.statusCode||!e.error||"Not Found"!==e.error&&"NoSuchTagSet"!==e.error.Code)t(e);else{var o={Tags:[],statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else{var i=[];try{i=n.Tagging.TagSet.Tag||[]}catch(e){}i=r.clone(r.isArray(i)?i:[i]),t(null,{Tags:i,statusCode:n.statusCode,headers:n.headers})}}))},deleteBucketTagging:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketTagging",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"tagging"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketLifecycle:function(e,t){var n=(e.LifecycleConfiguration||{}).Rules||e.Rules||[];n=r.clone(n);var o=r.json2xml({LifecycleConfiguration:{Rule:n}}),i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketLifecycle",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"lifecycle",headers:i},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketLifecycle:function(e,t){l.call(this,{Action:"name/cos:GetBucketLifecycle",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"lifecycle"},(function(e,n){if(e)if(404===e.statusCode&&e.error&&"NoSuchLifecycleConfiguration"===e.error.Code){var o={Rules:[],statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else t(e);else{var i=[];try{i=n.LifecycleConfiguration.Rule||[]}catch(e){}i=r.clone(r.isArray(i)?i:[i]),t(null,{Rules:i,statusCode:n.statusCode,headers:n.headers})}}))},deleteBucketLifecycle:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketLifecycle",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"lifecycle"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketVersioning:function(e,t){if(e.VersioningConfiguration){var n=e.VersioningConfiguration||{},o=r.json2xml({VersioningConfiguration:n}),i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketVersioning",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"versioning",headers:i},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))}else t(r.error(new Error("missing param VersioningConfiguration")))},getBucketVersioning:function(e,t){l.call(this,{Action:"name/cos:GetBucketVersioning",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"versioning"},(function(e,n){e||!n.VersioningConfiguration&&(n.VersioningConfiguration={}),t(e,n)}))},putBucketReplication:function(e,t){var n=r.clone(e.ReplicationConfiguration),o=r.json2xml({ReplicationConfiguration:n});o=(o=o.replace(/<(\/?)Rules>/gi,"<$1Rule>")).replace(/<(\/?)Tags>/gi,"<$1Tag>");var i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketReplication",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"replication",headers:i},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketReplication:function(e,t){l.call(this,{Action:"name/cos:GetBucketReplication",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"replication"},(function(e,n){if(e)if(404!==e.statusCode||!e.error||"Not Found"!==e.error&&"ReplicationConfigurationnotFoundError"!==e.error.Code)t(e);else{var o={ReplicationConfiguration:{Rules:[]},statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else!n.ReplicationConfiguration&&(n.ReplicationConfiguration={}),n.ReplicationConfiguration.Rule&&(n.ReplicationConfiguration.Rules=r.makeArray(n.ReplicationConfiguration.Rule),delete n.ReplicationConfiguration.Rule),t(e,n)}))},deleteBucketReplication:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketReplication",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"replication"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketWebsite:function(e,t){if(e.WebsiteConfiguration){var n=r.clone(e.WebsiteConfiguration||{}),o=n.RoutingRules||n.RoutingRule||[];o=r.isArray(o)?o:[o],delete n.RoutingRule,delete n.RoutingRules,o.length&&(n.RoutingRules={RoutingRule:o});var i=r.json2xml({WebsiteConfiguration:n}),a=e.Headers;a["Content-Type"]="application/xml",a["Content-MD5"]=r.binaryBase64(r.md5(i)),l.call(this,{Action:"name/cos:PutBucketWebsite",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:i,action:"website",headers:a},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))}else t(r.error(new Error("missing param WebsiteConfiguration")))},getBucketWebsite:function(e,t){l.call(this,{Action:"name/cos:GetBucketWebsite",method:"GET",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,action:"website"},(function(e,n){if(e)if(404===e.statusCode&&"NoSuchWebsiteConfiguration"===e.error.Code){var o={WebsiteConfiguration:{},statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else t(e);else{var i=n.WebsiteConfiguration||{};if(i.RoutingRules){var a=r.clone(i.RoutingRules.RoutingRule||[]);a=r.makeArray(a),i.RoutingRules=a}t(null,{WebsiteConfiguration:i,statusCode:n.statusCode,headers:n.headers})}}))},deleteBucketWebsite:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketWebsite",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"website"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketReferer:function(e,t){if(e.RefererConfiguration){var n=r.clone(e.RefererConfiguration||{}),o=n.DomainList||{},i=o.Domains||o.Domain||[];(i=r.isArray(i)?i:[i]).length&&(n.DomainList={Domain:i});var a=r.json2xml({RefererConfiguration:n}),s=e.Headers;s["Content-Type"]="application/xml",s["Content-MD5"]=r.binaryBase64(r.md5(a)),l.call(this,{Action:"name/cos:PutBucketReferer",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:a,action:"referer",headers:s},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))}else t(r.error(new Error("missing param RefererConfiguration")))},getBucketReferer:function(e,t){l.call(this,{Action:"name/cos:GetBucketReferer",method:"GET",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,action:"referer"},(function(e,n){if(e)if(404===e.statusCode&&"NoSuchRefererConfiguration"===e.error.Code){var o={WebsiteConfiguration:{},statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else t(e);else{var i=n.RefererConfiguration||{};if(i.DomainList){var a=r.clone(i.DomainList.Domain||[]);a=r.makeArray(a),i.DomainList={Domains:a}}t(null,{RefererConfiguration:i,statusCode:n.statusCode,headers:n.headers})}}))},putBucketDomain:function(e,t){var n=(e.DomainConfiguration||{}).DomainRule||e.DomainRule||[];n=r.clone(n);var o=r.json2xml({DomainConfiguration:{DomainRule:n}}),i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketDomain",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"domain",headers:i},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketDomain:function(e,t){l.call(this,{Action:"name/cos:GetBucketDomain",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"domain"},(function(e,n){if(e)return t(e);var o=[];try{o=n.DomainConfiguration.DomainRule||[]}catch(e){}o=r.clone(r.isArray(o)?o:[o]),t(null,{DomainRule:o,statusCode:n.statusCode,headers:n.headers})}))},deleteBucketDomain:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketDomain",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"domain"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketOrigin:function(e,t){var n=(e.OriginConfiguration||{}).OriginRule||e.OriginRule||[];n=r.clone(n);var o=r.json2xml({OriginConfiguration:{OriginRule:n}}),i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketOrigin",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"origin",headers:i},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketOrigin:function(e,t){l.call(this,{Action:"name/cos:GetBucketOrigin",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"origin"},(function(e,n){if(e)return t(e);var o=[];try{o=n.OriginConfiguration.OriginRule||[]}catch(e){}o=r.clone(r.isArray(o)?o:[o]),t(null,{OriginRule:o,statusCode:n.statusCode,headers:n.headers})}))},deleteBucketOrigin:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketOrigin",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"origin"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketLogging:function(e,t){var n=r.json2xml({BucketLoggingStatus:e.BucketLoggingStatus||""}),o=e.Headers;o["Content-Type"]="application/xml",o["Content-MD5"]=r.binaryBase64(r.md5(n)),l.call(this,{Action:"name/cos:PutBucketLogging",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:n,action:"logging",headers:o},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketLogging:function(e,t){l.call(this,{Action:"name/cos:GetBucketLogging",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"logging"},(function(e,n){if(e)return t(e);t(null,{BucketLoggingStatus:n.BucketLoggingStatus,statusCode:n.statusCode,headers:n.headers})}))},putBucketInventory:function(e,t){var n=r.clone(e.InventoryConfiguration);if(n.OptionalFields){var o=n.OptionalFields||[];n.OptionalFields={Field:o}}if(n.Destination&&n.Destination.COSBucketDestination&&n.Destination.COSBucketDestination.Encryption){var i=n.Destination.COSBucketDestination.Encryption;Object.keys(i).indexOf("SSECOS")>-1&&(i["SSE-COS"]=i.SSECOS,delete i.SSECOS)}var a=r.json2xml({InventoryConfiguration:n}),s=e.Headers;s["Content-Type"]="application/xml",s["Content-MD5"]=r.binaryBase64(r.md5(a)),l.call(this,{Action:"name/cos:PutBucketInventory",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:a,action:"inventory",qs:{id:e.Id},headers:s},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketInventory:function(e,t){l.call(this,{Action:"name/cos:GetBucketInventory",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"inventory",qs:{id:e.Id}},(function(e,n){if(e)return t(e);var o=n.InventoryConfiguration;if(o&&o.OptionalFields&&o.OptionalFields.Field){var i=o.OptionalFields.Field;r.isArray(i)||(i=[i]),o.OptionalFields=i}if(o.Destination&&o.Destination.COSBucketDestination&&o.Destination.COSBucketDestination.Encryption){var a=o.Destination.COSBucketDestination.Encryption;Object.keys(a).indexOf("SSE-COS")>-1&&(a.SSECOS=a["SSE-COS"],delete a["SSE-COS"])}t(null,{InventoryConfiguration:o,statusCode:n.statusCode,headers:n.headers})}))},listBucketInventory:function(e,t){l.call(this,{Action:"name/cos:ListBucketInventory",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"inventory",qs:{"continuation-token":e.ContinuationToken}},(function(e,n){if(e)return t(e);var o=n.ListInventoryConfigurationResult,i=o.InventoryConfiguration||[];i=r.isArray(i)?i:[i],delete o.InventoryConfiguration,r.each(i,(function(e){if(e&&e.OptionalFields&&e.OptionalFields.Field){var t=e.OptionalFields.Field;r.isArray(t)||(t=[t]),e.OptionalFields=t}if(e.Destination&&e.Destination.COSBucketDestination&&e.Destination.COSBucketDestination.Encryption){var n=e.Destination.COSBucketDestination.Encryption;Object.keys(n).indexOf("SSE-COS")>-1&&(n.SSECOS=n["SSE-COS"],delete n["SSE-COS"])}})),o.InventoryConfigurations=i,r.extend(o,{statusCode:n.statusCode,headers:n.headers}),t(null,o)}))},deleteBucketInventory:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketInventory",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"inventory",qs:{id:e.Id}},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},putBucketAccelerate:function(e,t){if(e.AccelerateConfiguration){var n={AccelerateConfiguration:e.AccelerateConfiguration||{}},o=r.json2xml(n),i={"Content-Type":"application/xml"};i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:PutBucketAccelerate",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:o,action:"accelerate",headers:i},(function(e,n){if(e)return t(e);t(null,{statusCode:n.statusCode,headers:n.headers})}))}else t(r.error(new Error("missing param AccelerateConfiguration")))},getBucketAccelerate:function(e,t){l.call(this,{Action:"name/cos:GetBucketAccelerate",method:"GET",Bucket:e.Bucket,Region:e.Region,action:"accelerate"},(function(e,n){e||!n.AccelerateConfiguration&&(n.AccelerateConfiguration={}),t(e,n)}))},putBucketEncryption:function(e,t){var n=e.ServerSideEncryptionConfiguration||{},o=n.Rule||n.Rules||[],i=r.json2xml({ServerSideEncryptionConfiguration:{Rule:o}}),a=e.Headers;a["Content-Type"]="application/xml",a["Content-MD5"]=r.binaryBase64(r.md5(i)),l.call(this,{Action:"name/cos:PutBucketEncryption",method:"PUT",Bucket:e.Bucket,Region:e.Region,body:i,action:"encryption",headers:a},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getBucketEncryption:function(e,t){l.call(this,{Action:"name/cos:GetBucketEncryption",method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"encryption"},(function(e,n){if(e)if(404===e.statusCode&&"NoSuchEncryptionConfiguration"===e.code){var o={EncryptionConfiguration:{Rules:[]},statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else t(e);else{var i=r.makeArray(n.EncryptionConfiguration&&n.EncryptionConfiguration.Rule||[]);n.EncryptionConfiguration={Rules:i},t(e,n)}}))},deleteBucketEncryption:function(e,t){l.call(this,{Action:"name/cos:DeleteBucketReplication",method:"DELETE",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"encryption"},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getObject:function(e,t){var n=e.Query||{},o=e.QueryString||"",i=r.throttleOnProgress.call(this,0,e.onProgress);n["response-content-type"]=e.ResponseContentType,n["response-content-language"]=e.ResponseContentLanguage,n["response-expires"]=e.ResponseExpires,n["response-cache-control"]=e.ResponseCacheControl,n["response-content-disposition"]=e.ResponseContentDisposition,n["response-content-encoding"]=e.ResponseContentEncoding,l.call(this,{Action:"name/cos:GetObject",method:"GET",Bucket:e.Bucket,Region:e.Region,Key:e.Key,VersionId:e.VersionId,DataType:e.DataType,headers:e.Headers,qs:n,qsStr:o,rawBody:!0,onDownloadProgress:i},(function(n,o){if(i(null,!0),n){var a=n.statusCode;return e.Headers["If-Modified-Since"]&&a&&304===a?t(null,{NotModified:!0}):t(n)}t(null,{Body:o.body,ETag:r.attr(o.headers,"etag",""),statusCode:o.statusCode,headers:o.headers})}))},headObject:function(e,t){l.call(this,{Action:"name/cos:HeadObject",method:"HEAD",Bucket:e.Bucket,Region:e.Region,Key:e.Key,VersionId:e.VersionId,headers:e.Headers},(function(n,o){if(n){var i=n.statusCode;return e.Headers["If-Modified-Since"]&&i&&304===i?t(null,{NotModified:!0,statusCode:i}):t(n)}o.ETag=r.attr(o.headers,"etag",""),t(null,o)}))},listObjectVersions:function(e,t){var n={};n.prefix=e.Prefix||"",n.delimiter=e.Delimiter,n["key-marker"]=e.KeyMarker,n["version-id-marker"]=e.VersionIdMarker,n["max-keys"]=e.MaxKeys,n["encoding-type"]=e.EncodingType,l.call(this,{Action:"name/cos:GetBucketObjectVersions",ResourceKey:n.prefix,method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,qs:n,action:"versions"},(function(e,n){if(e)return t(e);var o=n.ListVersionsResult||{},i=o.DeleteMarker||[];i=r.isArray(i)?i:[i];var a=o.Version||[];a=r.isArray(a)?a:[a];var s=r.clone(o);delete s.DeleteMarker,delete s.Version,r.extend(s,{DeleteMarkers:i,Versions:a,statusCode:n.statusCode,headers:n.headers}),t(null,s)}))},putObject:function(e,t){var n=this,o=e.ContentLength,i=r.throttleOnProgress.call(n,o,e.onProgress),a=e.Headers;a["Cache-Control"]||a["cache-control"]||(a["Cache-Control"]=""),a["Content-Type"]||a["content-type"]||(a["Content-Type"]=e.Body&&e.Body.type||"");var c=e.UploadAddMetaMd5||n.options.UploadAddMetaMd5||n.options.UploadCheckContentMd5;r.getBodyMd5(c,e.Body,(function(c){c&&(n.options.UploadCheckContentMd5&&(a["Content-MD5"]=r.binaryBase64(c)),(e.UploadAddMetaMd5||n.options.UploadAddMetaMd5)&&(a["x-cos-meta-md5"]=c)),void 0!==e.ContentLength&&(a["Content-Length"]=e.ContentLength),i(null,!0),l.call(n,{Action:"name/cos:PutObject",TaskId:e.TaskId,method:"PUT",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,qs:e.Query,body:e.Body,onProgress:i},(function(a,c){if(a)return i(null,!0),t(a);i({loaded:o,total:o},!0);var u=s({ForcePathStyle:n.options.ForcePathStyle,protocol:n.options.Protocol,domain:n.options.Domain,bucket:e.Bucket,region:n.options.UseAccelerate?"accelerate":e.Region,object:e.Key});u=u.substr(u.indexOf("://")+3),c.Location=u,c.ETag=r.attr(c.headers,"etag",""),t(null,c)}))}),e.onHashProgress)},deleteObject:function(e,t){l.call(this,{Action:"name/cos:DeleteObject",method:"DELETE",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,VersionId:e.VersionId},(function(e,n){if(e){var o=e.statusCode;return o&&404===o?t(null,{BucketNotFound:!0,statusCode:o}):t(e)}t(null,{statusCode:n.statusCode,headers:n.headers})}))},getObjectAcl:function(e,t){l.call(this,{Action:"name/cos:GetObjectACL",method:"GET",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,action:"acl"},(function(e,n){if(e)return t(e);var o=n.AccessControlPolicy||{},a=o.Owner||{},s=o.AccessControlList&&o.AccessControlList.Grant||[];s=r.isArray(s)?s:[s];var c=i(o);delete c.GrantWrite,n.headers&&n.headers["x-cos-acl"]&&(c.ACL=n.headers["x-cos-acl"]),c=r.extend(c,{Owner:a,Grants:s,statusCode:n.statusCode,headers:n.headers}),t(null,c)}))},putObjectAcl:function(e,t){var n=e.Headers,o="";if(e.AccessControlPolicy){var i=r.clone(e.AccessControlPolicy||{}),s=i.Grants||i.Grant;s=r.isArray(s)?s:[s],delete i.Grant,delete i.Grants,i.AccessControlList={Grant:s},o=r.json2xml({AccessControlPolicy:i}),n["Content-Type"]="application/xml",n["Content-MD5"]=r.binaryBase64(r.md5(o))}r.each(n,(function(e,t){0===t.indexOf("x-cos-grant-")&&(n[t]=a(n[t]))})),l.call(this,{Action:"name/cos:PutObjectACL",method:"PUT",Bucket:e.Bucket,Region:e.Region,Key:e.Key,action:"acl",headers:n,body:o},(function(e,n){if(e)return t(e);t(null,{statusCode:n.statusCode,headers:n.headers})}))},optionsObject:function(e,t){var n=e.Headers;n.Origin=e.Origin,n["Access-Control-Request-Method"]=e.AccessControlRequestMethod,n["Access-Control-Request-Headers"]=e.AccessControlRequestHeaders,l.call(this,{Action:"name/cos:OptionsObject",method:"OPTIONS",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:n},(function(e,n){if(e)return e.statusCode&&403===e.statusCode?t(null,{OptionsForbidden:!0,statusCode:e.statusCode}):t(e);var o=n.headers||{};t(null,{AccessControlAllowOrigin:o["access-control-allow-origin"],AccessControlAllowMethods:o["access-control-allow-methods"],AccessControlAllowHeaders:o["access-control-allow-headers"],AccessControlExposeHeaders:o["access-control-expose-headers"],AccessControlMaxAge:o["access-control-max-age"],statusCode:n.statusCode,headers:n.headers})}))},putObjectCopy:function(e,t){var n=this,o=e.Headers;o["Cache-Control"]||o["cache-control"]||(o["Cache-Control"]="");var i=(e.CopySource||"").match(/^([^.]+-\d+)\.cos(v6)?\.([^.]+)\.[^/]+\/(.+)$/);if(i){var a=i[1],c=i[3],u=decodeURIComponent(i[4]);l.call(this,{Scope:[{action:"name/cos:GetObject",bucket:a,region:c,prefix:u},{action:"name/cos:PutObject",bucket:e.Bucket,region:e.Region,prefix:e.Key}],method:"PUT",Bucket:e.Bucket,Region:e.Region,Key:e.Key,VersionId:e.VersionId,headers:e.Headers},(function(o,i){if(o)return t(o);var a=r.clone(i.CopyObjectResult||{}),c=s({ForcePathStyle:n.options.ForcePathStyle,protocol:n.options.Protocol,domain:n.options.Domain,bucket:e.Bucket,region:e.Region,object:e.Key,isLocation:!0});r.extend(a,{Location:c,statusCode:i.statusCode,headers:i.headers}),t(null,a)}))}else t(r.error(new Error("CopySource format error")))},deleteMultipleObject:function(e,t){var n=e.Objects||[],o=e.Quiet;n=r.isArray(n)?n:[n];var i=r.json2xml({Delete:{Object:n,Quiet:o||!1}}),a=e.Headers;a["Content-Type"]="application/xml",a["Content-MD5"]=r.binaryBase64(r.md5(i));var s=r.map(n,(function(t){return{action:"name/cos:DeleteObject",bucket:e.Bucket,region:e.Region,prefix:t.Key}}));l.call(this,{Scope:s,method:"POST",Bucket:e.Bucket,Region:e.Region,body:i,action:"delete",headers:a},(function(e,n){if(e)return t(e);var o=n.DeleteResult||{},i=o.Deleted||[],a=o.Error||[];i=r.isArray(i)?i:[i],a=r.isArray(a)?a:[a];var s=r.clone(o);r.extend(s,{Error:a,Deleted:i,statusCode:n.statusCode,headers:n.headers}),t(null,s)}))},restoreObject:function(e,t){var n=e.Headers;if(e.RestoreRequest){var o=e.RestoreRequest||{},i=r.json2xml({RestoreRequest:o});n["Content-Type"]="application/xml",n["Content-MD5"]=r.binaryBase64(r.md5(i)),l.call(this,{Action:"name/cos:RestoreObject",method:"POST",Bucket:e.Bucket,Region:e.Region,Key:e.Key,VersionId:e.VersionId,body:i,action:"restore",headers:n},t)}else t(r.error(new Error("missing param RestoreRequest")))},putObjectTagging:function(e,t){var n=e.Tagging||{},o=n.TagSet||n.Tags||e.Tags||[];o=r.clone(r.isArray(o)?o:[o]);var i=r.json2xml({Tagging:{TagSet:{Tag:o}}}),a=e.Headers;a["Content-Type"]="application/xml",a["Content-MD5"]=r.binaryBase64(r.md5(i)),l.call(this,{Action:"name/cos:PutObjectTagging",method:"PUT",Bucket:e.Bucket,Key:e.Key,Region:e.Region,body:i,action:"tagging",headers:a,VersionId:e.VersionId},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},getObjectTagging:function(e,t){l.call(this,{Action:"name/cos:GetObjectTagging",method:"GET",Key:e.Key,Bucket:e.Bucket,Region:e.Region,headers:e.Headers,action:"tagging",VersionId:e.VersionId},(function(e,n){if(e)if(404!==e.statusCode||!e.error||"Not Found"!==e.error&&"NoSuchTagSet"!==e.error.Code)t(e);else{var o={Tags:[],statusCode:e.statusCode};e.headers&&(o.headers=e.headers),t(null,o)}else{var i=[];try{i=n.Tagging.TagSet.Tag||[]}catch(e){}i=r.clone(r.isArray(i)?i:[i]),t(null,{Tags:i,statusCode:n.statusCode,headers:n.headers})}}))},deleteObjectTagging:function(e,t){l.call(this,{Action:"name/cos:DeleteObjectTagging",method:"DELETE",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,action:"tagging",VersionId:e.VersionId},(function(e,n){return e&&204===e.statusCode?t(null,{statusCode:e.statusCode}):e?t(e):void t(null,{statusCode:n.statusCode,headers:n.headers})}))},selectObjectContent:function(e,t){if(!e.SelectType)return t(r.error(new Error("missing param SelectType")));var n=e.SelectRequest||{},o=r.json2xml({SelectRequest:n}),i=e.Headers;i["Content-Type"]="application/xml",i["Content-MD5"]=r.binaryBase64(r.md5(o)),l.call(this,{Action:"name/cos:GetObject",method:"POST",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,action:"select",qs:{"select-type":e.SelectType},VersionId:e.VersionId,body:o,DataType:"arraybuffer",rawBody:!0},(function(e,n){if(e&&204===e.statusCode)return t(null,{statusCode:e.statusCode});if(e)return t(e);var o=r.parseSelectPayload(n.body);t(null,{statusCode:n.statusCode,headers:n.headers,Body:o.body,Payload:o.payload})}))},uploadPartCopy:function(e,t){var n=(e.CopySource||"").match(/^([^.]+-\d+)\.cos(v6)?\.([^.]+)\.[^/]+\/(.+)$/);if(n){var o=n[1],i=n[3],a=decodeURIComponent(n[4]);l.call(this,{Scope:[{action:"name/cos:GetObject",bucket:o,region:i,prefix:a},{action:"name/cos:PutObject",bucket:e.Bucket,region:e.Region,prefix:e.Key}],method:"PUT",Bucket:e.Bucket,Region:e.Region,Key:e.Key,VersionId:e.VersionId,qs:{partNumber:e.PartNumber,uploadId:e.UploadId},headers:e.Headers},(function(e,n){if(e)return t(e);var o=r.clone(n.CopyPartResult||{});r.extend(o,{statusCode:n.statusCode,headers:n.headers}),t(null,o)}))}else t(r.error(new Error("CopySource format error")))},multipartInit:function(e,t){var n=this,o=e.Headers;o["Cache-Control"]||o["cache-control"]||(o["Cache-Control"]=""),o["Content-Type"]||o["content-type"]||(o["Content-Type"]=e.Body&&e.Body.type||""),r.getBodyMd5(e.Body&&(e.UploadAddMetaMd5||n.options.UploadAddMetaMd5),e.Body,(function(o){o&&(e.Headers["x-cos-meta-md5"]=o),l.call(n,{Action:"name/cos:InitiateMultipartUpload",method:"POST",Bucket:e.Bucket,Region:e.Region,Key:e.Key,action:"uploads",headers:e.Headers,qs:e.Query},(function(e,n){return e?t(e):(n=r.clone(n||{}))&&n.InitiateMultipartUploadResult?t(null,r.extend(n.InitiateMultipartUploadResult,{statusCode:n.statusCode,headers:n.headers})):void t(null,n)}))}),e.onHashProgress)},multipartUpload:function(e,t){var n=this;r.getFileSize("multipartUpload",e,(function(){r.getBodyMd5(n.options.UploadCheckContentMd5,e.Body,(function(o){o&&(e.Headers["Content-MD5"]=r.binaryBase64(o)),l.call(n,{Action:"name/cos:UploadPart",TaskId:e.TaskId,method:"PUT",Bucket:e.Bucket,Region:e.Region,Key:e.Key,qs:{partNumber:e.PartNumber,uploadId:e.UploadId},headers:e.Headers,onProgress:e.onProgress,body:e.Body||null},(function(e,n){if(e)return t(e);t(null,{ETag:r.attr(n.headers,"etag",""),statusCode:n.statusCode,headers:n.headers})}))}))}))},multipartComplete:function(e,t){for(var n=this,o=e.UploadId,i=e.Parts,a=0,c=i.length;a<c;a++)0!==i[a].ETag.indexOf('"')&&(i[a].ETag='"'+i[a].ETag+'"');var u=r.json2xml({CompleteMultipartUpload:{Part:i}});u=u.replace(/\n\s*/g,"");var d=e.Headers;d["Content-Type"]="application/xml",d["Content-MD5"]=r.binaryBase64(r.md5(u)),l.call(this,{Action:"name/cos:CompleteMultipartUpload",method:"POST",Bucket:e.Bucket,Region:e.Region,Key:e.Key,qs:{uploadId:o},body:u,headers:d},(function(o,i){if(o)return t(o);var a=s({ForcePathStyle:n.options.ForcePathStyle,protocol:n.options.Protocol,domain:n.options.Domain,bucket:e.Bucket,region:e.Region,object:e.Key,isLocation:!0}),c=i.CompleteMultipartUploadResult||{};c.ProcessResults&&c&&c.ProcessResults&&(c.UploadResult={OriginalInfo:{Key:c.Key,Location:a,ETag:c.ETag,ImageInfo:c.ImageInfo},ProcessResults:c.ProcessResults},delete c.ImageInfo,delete c.ProcessResults);var u=r.extend(c,{Location:a,statusCode:i.statusCode,headers:i.headers});t(null,u)}))},multipartList:function(e,t){var n={};n.delimiter=e.Delimiter,n["encoding-type"]=e.EncodingType,n.prefix=e.Prefix||"",n["max-uploads"]=e.MaxUploads,n["key-marker"]=e.KeyMarker,n["upload-id-marker"]=e.UploadIdMarker,n=r.clearKey(n),l.call(this,{Action:"name/cos:ListMultipartUploads",ResourceKey:n.prefix,method:"GET",Bucket:e.Bucket,Region:e.Region,headers:e.Headers,qs:n,action:"uploads"},(function(e,n){if(e)return t(e);if(n&&n.ListMultipartUploadsResult){var o=n.ListMultipartUploadsResult.Upload||[];o=r.isArray(o)?o:[o],n.ListMultipartUploadsResult.Upload=o}var i=r.clone(n.ListMultipartUploadsResult||{});r.extend(i,{statusCode:n.statusCode,headers:n.headers}),t(null,i)}))},multipartListPart:function(e,t){var n={};n.uploadId=e.UploadId,n["encoding-type"]=e.EncodingType,n["max-parts"]=e.MaxParts,n["part-number-marker"]=e.PartNumberMarker,l.call(this,{Action:"name/cos:ListParts",method:"GET",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,qs:n},(function(e,n){if(e)return t(e);var o=n.ListPartsResult||{},i=o.Part||[];i=r.isArray(i)?i:[i],o.Part=i;var a=r.clone(o);r.extend(a,{statusCode:n.statusCode,headers:n.headers}),t(null,a)}))},multipartAbort:function(e,t){var n={};n.uploadId=e.UploadId,l.call(this,{Action:"name/cos:AbortMultipartUpload",method:"DELETE",Bucket:e.Bucket,Region:e.Region,Key:e.Key,headers:e.Headers,qs:n},(function(e,n){if(e)return t(e);t(null,{statusCode:n.statusCode,headers:n.headers})}))},request:function(e,t){l.call(this,{method:e.Method,Bucket:e.Bucket,Region:e.Region,Key:e.Key,action:e.Action,headers:e.Headers,qs:e.Query,body:e.Body},(function(e,n){if(e)return t(e);n&&n.body&&(n.Body=n.body,delete n.body),t(e,n)}))},getObjectUrl:function(e,t){var n=this,o=s({ForcePathStyle:n.options.ForcePathStyle,protocol:e.Protocol||n.options.Protocol,domain:e.Domain||n.options.Domain,bucket:e.Bucket,region:e.Region,object:e.Key}),i="";e.Query&&(i+=r.obj2str(e.Query)),e.QueryString&&(i+=(i?"&":"")+e.QueryString);var a=o;if(void 0!==e.Sign&&!e.Sign)return i&&(a+="?"+i),t(null,{Url:a}),a;var u=c.call(this,{Action:"PUT"===(e.Method||"").toUpperCase()?"name/cos:PutObject":"name/cos:GetObject",Bucket:e.Bucket||"",Region:e.Region||"",Method:e.Method||"get",Key:e.Key,Expires:e.Expires},(function(e,n){if(t)if(e)t(e);else{var r=o;r+="?"+(n.Authorization.indexOf("q-signature")>-1?n.Authorization:"sign="+encodeURIComponent(n.Authorization)),n.SecurityToken&&(r+="&x-cos-security-token="+n.SecurityToken),n.ClientIP&&(r+="&clientIP="+n.ClientIP),n.ClientUA&&(r+="&clientUA="+n.ClientUA),n.Token&&(r+="&token="+n.Token),i&&(r+="&"+i),setTimeout((function(){t(null,{Url:r})}))}}));return u?(a+="?"+u.Authorization+(u.SecurityToken?"&x-cos-security-token="+u.SecurityToken:""),i&&(a+="&"+i)):i&&(a+="?"+i),a},getAuth:function(e){return r.getAuth({SecretId:e.SecretId||this.options.SecretId||"",SecretKey:e.SecretKey||this.options.SecretKey||"",Method:e.Method,Key:e.Key,Query:e.Query,Headers:e.Headers,Expires:e.Expires,UseRawKey:this.options.UseRawKey,SystemClockOffset:this.options.SystemClockOffset})}};e.exports.init=function(e,t){t.transferToTaskMethod(h,"putObject"),r.each(h,(function(t,n){e.prototype[n]=r.apiWrapper(n,t),function(e,t,n){r.each(["Cors","Acl"],(function(o){if(e.slice(-o.length)===o){var i=e.slice(0,-o.length)+o.toUpperCase(),a=r.apiWrapper(e,t),s=!1;n[i]=function(){!s&&console.warn("warning: cos."+i+" has been deprecated. Please Use cos."+e+" instead."),s=!0,a.apply(this,arguments)}}}))}(n,t,e.prototype)}))}},1715:(e,t,n)=>{"use strict";var o=n(1728),r=n(9589),i=n(5369),a=n(4257),s=n(6044),c={AppId:"",SecretId:"",SecretKey:"",SecurityToken:"",ChunkRetryTimes:2,FileParallelLimit:3,ChunkParallelLimit:3,ChunkSize:1048576,SliceSize:1048576,CopyChunkParallelLimit:20,CopyChunkSize:10485760,CopySliceSize:10485760,MaxPartNumber:1e4,ProgressInterval:1e3,Domain:"",ServiceDomain:"",Protocol:"",CompatibilityMode:!1,ForcePathStyle:!1,UseRawKey:!1,Timeout:0,CorrectClockSkew:!0,SystemClockOffset:0,UploadCheckContentMd5:!1,UploadQueueSize:1e4,UploadAddMetaMd5:!1,UploadIdCacheLimit:50,UseAccelerate:!1},u=function(e){this.options=o.extend(o.clone(c),e||{}),this.options.FileParallelLimit=Math.max(1,this.options.FileParallelLimit),this.options.ChunkParallelLimit=Math.max(1,this.options.ChunkParallelLimit),this.options.ChunkRetryTimes=Math.max(0,this.options.ChunkRetryTimes),this.options.ChunkSize=Math.max(1048576,this.options.ChunkSize),this.options.CopyChunkParallelLimit=Math.max(1,this.options.CopyChunkParallelLimit),this.options.CopyChunkSize=Math.max(1048576,this.options.CopyChunkSize),this.options.CopySliceSize=Math.max(0,this.options.CopySliceSize),this.options.MaxPartNumber=Math.max(1024,Math.min(1e4,this.options.MaxPartNumber)),this.options.Timeout=Math.max(0,this.options.Timeout),this.options.AppId&&console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g: "test-1250000000").'),o.isNode()&&(console.warn("warning: cos-js-sdk-v5 不支持 nodejs 环境使用，请改用 cos-nodejs-sdk-v5，参考文档： https://cloud.tencent.com/document/product/436/8629"),console.warn("warning: cos-js-sdk-v5 does not support nodejs environment. Please use cos-nodejs-sdk-v5 instead. See: https://cloud.tencent.com/document/product/436/8629")),r.init(this),i.init(this)};a.init(u,i),s.init(u,i),u.getAuthorization=o.getAuth,u.version="1.2.14",e.exports=u},9589:e=>{var t=function(e){var t={},n=function(e){return!t[e]&&(t[e]=[]),t[e]};e.on=function(e,t){"task-list-update"===e&&console.warn('warning: Event "'+e+'" has been deprecated. Please use "list-update" instead.'),n(e).push(t)},e.off=function(e,t){for(var o=n(e),r=o.length-1;r>=0;r--)t===o[r]&&o.splice(r,1)},e.emit=function(e,t){for(var o=n(e).map((function(e){return e})),r=0;r<o.length;r++)o[r](t)}};e.exports.init=t,e.exports.EventProxy=function(){t(this)}},1718:(e,t,n)=>{var o,r,i=n(1728),a="cos_sdk_upload_cache",s=function(){try{var e=JSON.parse(localStorage.getItem(a))}catch(e){}e||(e=[]),o=e},c=function(){try{localStorage.setItem(a,JSON.stringify(o))}catch(e){}},u=function(){if(!o){s.call(this);for(var e=!1,t=Math.round(Date.now()/1e3),n=o.length-1;n>=0;n--){var r=o[n][2];(!r||r+2592e3<t)&&(o.splice(n,1),e=!0)}e&&c()}},l=function(){r||(r=setTimeout((function(){c(),r=null}),400))},d={using:{},setUsing:function(e){d.using[e]=!0},removeUsing:function(e){delete d.using[e]},getFileId:function(e,t,n,o){return e.name&&e.size&&e.lastModifiedDate&&t?i.md5([e.name,e.size,e.lastModifiedDate,t,n,o].join("::")):null},getUploadIdList:function(e){if(!e)return null;u.call(this);for(var t=[],n=0;n<o.length;n++)o[n][0]===e&&t.push(o[n][1]);return t.length?t:null},saveUploadId:function(e,t,n){if(u.call(this),e){for(var r=o.length-1;r>=0;r--){var i=o[r];i[0]===e&&i[1]===t&&o.splice(r,1)}o.unshift([e,t,Math.round(Date.now()/1e3)]),o.length>n&&o.splice(n),l()}},removeUploadId:function(e){u.call(this),delete d.using[e];for(var t=o.length-1;t>=0;t--)o[t][1]===e&&o.splice(t,1);l()}};e.exports=d},5369:(e,t,n)=>{var o=n(1718),r=n(1728),i={};e.exports.transferToTaskMethod=function(e,t){i[t]=e[t],e[t]=function(e,n){e.SkipTask?i[t].call(this,e,n):this._addTask(t,e,n)}},e.exports.init=function(e){var t,n,a=[],s={},c=0,u=0,l=function(e){var t={id:e.id,Bucket:e.Bucket,Region:e.Region,Key:e.Key,FilePath:e.FilePath,state:e.state,loaded:e.loaded,size:e.size,speed:e.speed,percent:e.percent,hashPercent:e.hashPercent,error:e.error};return e.FilePath&&(t.FilePath=e.FilePath),e._custom&&(t._custom=e._custom),t},d=(n=function(){t=0,e.emit("task-list-update",{list:r.map(a,l)}),e.emit("list-update",{list:r.map(a,l)})},function(){t||(t=setTimeout(n))}),h=function(){if(!(a.length<=e.options.UploadQueueSize)){for(var t=0;t<u&&t<a.length&&a.length>e.options.UploadQueueSize;){var n="waiting"===a[t].state||"checking"===a[t].state||"uploading"===a[t].state;a[t]&&n?t++:(s[a[t].id]&&delete s[a[t].id],a.splice(t,1),u--)}d()}},f=function(){if(!(c>=e.options.FileParallelLimit)){for(;a[u]&&"waiting"!==a[u].state;)u++;if(!(u>=a.length)){var t=a[u];u++,c++,t.state="checking",t.params.onTaskStart&&t.params.onTaskStart(l(t)),!t.params.UploadData&&(t.params.UploadData={});var n=r.formatParams(t.api,t.params);i[t.api].call(e,n,(function(n,o){e._isRunningTask(t.id)&&("checking"!==t.state&&"uploading"!==t.state||(t.state=n?"error":"success",n&&(t.error=n),c--,d(),f(),t.callback&&t.callback(n,o),"success"===t.state&&(t.params&&(delete t.params.UploadData,delete t.params.Body,delete t.params),delete t.callback)),h())})),d(),setTimeout(f)}}},p=function(t,n){var r=s[t];if(r){var i=r&&"waiting"===r.state,a=r&&("checking"===r.state||"uploading"===r.state);if("canceled"===n&&"canceled"!==r.state||"paused"===n&&i||"paused"===n&&a){if("paused"===n&&r.params.Body&&"function"==typeof r.params.Body.pipe)return void console.error("stream not support pause");r.state=n,e.emit("inner-kill-task",{TaskId:t,toState:n});try{var u=r&&r.params&&r.params.UploadData.UploadId}catch(e){}"canceled"===n&&u&&o.removeUsing(u),d(),a&&(c--,f()),"canceled"===n&&(r.params&&(delete r.params.UploadData,delete r.params.Body,delete r.params),delete r.callback)}h()}};e._addTasks=function(t){r.each(t,(function(t){e._addTask(t.api,t.params,t.callback,!0)})),d()};var g=!0;e._addTask=function(t,n,o,i){n=r.formatParams(t,n);var c=r.uuid();n.TaskId=c,n.onTaskReady&&n.onTaskReady(c),n.TaskReady&&(n.TaskReady(c),g&&console.warn('warning: Param "TaskReady" has been deprecated. Please use "onTaskReady" instead.'),g=!1);var u={params:n,callback:o,api:t,index:a.length,id:c,Bucket:n.Bucket,Region:n.Region,Key:n.Key,FilePath:n.FilePath||"",state:"waiting",loaded:0,size:0,speed:0,percent:0,hashPercent:0,error:null,_custom:n._custom},l=n.onHashProgress;n.onHashProgress=function(t){e._isRunningTask(u.id)&&(u.hashPercent=t.percent,l&&l(t),d())};var p=n.onProgress;return n.onProgress=function(t){e._isRunningTask(u.id)&&("checking"===u.state&&(u.state="uploading"),u.loaded=t.loaded,u.speed=t.speed,u.percent=t.percent,p&&p(t),d())},r.getFileSize(t,n,(function(e,t){if(e)return o(r.error(e));s[c]=u,a.push(u),u.size=t,!i&&d(),f(),h()})),c},e._isRunningTask=function(e){var t=s[e];return!(!t||"checking"!==t.state&&"uploading"!==t.state)},e.getTaskList=function(){return r.map(a,l)},e.cancelTask=function(e){p(e,"canceled")},e.pauseTask=function(e){p(e,"paused")},e.restartTask=function(e){var t=s[e];!t||"paused"!==t.state&&"error"!==t.state||(t.state="waiting",d(),u=Math.min(u,t.index),f())},e.isUploadRunning=function(){return c||u<a.length}}},1728:(e,t,n)=>{"use strict";var o=n(5432),r=n(1595),i=n(7509),a=n(1412);function s(e){return encodeURIComponent(e).replace(/!/g,"%21").replace(/'/g,"%27").replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/\*/g,"%2A")}var c,u,l,d,h,f=function(e,t,n){var o=t/8,r=e.slice(n,n+o);return new Uint8Array(r).reverse(),new{8:Uint8Array,16:Uint16Array,32:Uint32Array}[t](r)[0]},p=function(e,t,n,o){var r=e.slice(t,n),i="";return new Uint8Array(r).forEach((function(e){i+=String.fromCharCode(e)})),o&&(i=decodeURIComponent(escape(i))),i},g=function(){},m=function(e){var t={};for(var n in e)e.hasOwnProperty(n)&&void 0!==e[n]&&null!==e[n]&&(t[n]=e[n]);return t},y=(h=function(e,t){e=e.split("."),t=t.split(".");for(var n=0;n<t.length;n++)if(e[n]!==t[n])return parseInt(e[n])>parseInt(t[n])?1:-1;return 0},u=((c=navigator&&navigator.userAgent).match(/Chrome\/([.\d]+)/)||[])[1],l=(c.match(/QBCore\/([.\d]+)/)||[])[1],d=(c.match(/QQBrowser\/([.\d]+)/)||[])[1],u&&h(u,"53.0.2785.116")<0&&l&&h(l,"3.53.991.400")<0&&d&&h(d,"9.0.2524.400")<=0||!1),C=1048576;function v(e){return b(e,(function(e){return"object"==typeof e&&null!==e?v(e):e}))}function k(e,t){return R(t,(function(n,o){e[o]=t[o]})),e}function S(e){return e instanceof Array}function R(e,t){for(var n in e)e.hasOwnProperty(n)&&t(e[n],n)}function b(e,t){var n=S(e)?[]:{};for(var o in e)e.hasOwnProperty(o)&&(n[o]=t(e[o],o));return n}var A=function(e,t){if(t=k({},t),"getAuth"!==e&&"getV4Auth"!==e&&"getObjectUrl"!==e){var n=t.Headers||{};t&&"object"==typeof t&&(!function(){for(var e in t)t.hasOwnProperty(e)&&e.indexOf("x-cos-")>-1&&(n[e]=t[e])}(),T.each({"x-cos-mfa":"MFA","Content-MD5":"ContentMD5","Content-Length":"ContentLength","Content-Type":"ContentType",Expect:"Expect",Expires:"Expires","Cache-Control":"CacheControl","Content-Disposition":"ContentDisposition","Content-Encoding":"ContentEncoding",Range:"Range","If-Modified-Since":"IfModifiedSince","If-Unmodified-Since":"IfUnmodifiedSince","If-Match":"IfMatch","If-None-Match":"IfNoneMatch","x-cos-copy-source":"CopySource","x-cos-copy-source-Range":"CopySourceRange","x-cos-metadata-directive":"MetadataDirective","x-cos-copy-source-If-Modified-Since":"CopySourceIfModifiedSince","x-cos-copy-source-If-Unmodified-Since":"CopySourceIfUnmodifiedSince","x-cos-copy-source-If-Match":"CopySourceIfMatch","x-cos-copy-source-If-None-Match":"CopySourceIfNoneMatch","x-cos-acl":"ACL","x-cos-grant-read":"GrantRead","x-cos-grant-write":"GrantWrite","x-cos-grant-full-control":"GrantFullControl","x-cos-grant-read-acp":"GrantReadAcp","x-cos-grant-write-acp":"GrantWriteAcp","x-cos-storage-class":"StorageClass","x-cos-traffic-limit":"TrafficLimit","x-cos-server-side-encryption-customer-algorithm":"SSECustomerAlgorithm","x-cos-server-side-encryption-customer-key":"SSECustomerKey","x-cos-server-side-encryption-customer-key-MD5":"SSECustomerKeyMD5","x-cos-server-side-encryption":"ServerSideEncryption","x-cos-server-side-encryption-cos-kms-key-id":"SSEKMSKeyId","x-cos-server-side-encryption-context":"SSEContext"},(function(e,o){void 0!==t[e]&&(n[o]=t[e])})),t.Headers=m(n))}return t},B=function(e){return Date.now()+(e||0)},T={noop:g,formatParams:A,apiWrapper:function(e,t){return function(n,o){var r=this;"function"==typeof n&&(o=n,n={}),n=A(e,n);var i=function(e){return e&&e.headers&&(e.headers["x-cos-request-id"]&&(e.RequestId=e.headers["x-cos-request-id"]),e.headers["x-cos-version-id"]&&(e.VersionId=e.headers["x-cos-version-id"]),e.headers["x-cos-delete-marker"]&&(e.DeleteMarker=e.headers["x-cos-delete-marker"])),e},a=function(e,t){o&&o(i(e),i(t))},s=function(){if("getService"!==e&&"abortUploadTask"!==e){var t=function(e,t){var n=t.Bucket,o=t.Region,r=t.Key;if(e.indexOf("Bucket")>-1||"deleteMultipleObject"===e||"multipartList"===e||"listObjectVersions"===e){if(!n)return"Bucket";if(!o)return"Region"}else if(e.indexOf("Object")>-1||e.indexOf("multipart")>-1||"sliceUploadFile"===e||"abortUploadTask"===e){if(!n)return"Bucket";if(!o)return"Region";if(!r)return"Key"}return!1}(e,n);if(t)return"missing param "+t;if(n.Region){if(n.Region.indexOf("cos.")>-1)return'param Region should not be start with "cos."';if(!/^([a-z\d-]+)$/.test(n.Region))return"Region format error.";r.options.CompatibilityMode||-1!==n.Region.indexOf("-")||"yfb"===n.Region||"default"===n.Region||"accelerate"===n.Region||console.warn("warning: param Region format error, find help here: https://cloud.tencent.com/document/product/436/6224")}if(n.Bucket){if(!/^([a-z\d-]+)-(\d+)$/.test(n.Bucket))if(n.AppId)n.Bucket=n.Bucket+"-"+n.AppId;else{if(!r.options.AppId)return'Bucket should format as "test-1250000000".';n.Bucket=n.Bucket+"-"+r.options.AppId}n.AppId&&(console.warn('warning: AppId has been deprecated, Please put it at the end of parameter Bucket(E.g Bucket:"test-1250000000" ).'),delete n.AppId)}!r.options.UseRawKey&&n.Key&&"/"===n.Key.substr(0,1)&&(n.Key=n.Key.substr(1))}}(),c="getAuth"===e||"getObjectUrl"===e;if(window.Promise&&!c&&!o)return new Promise((function(e,i){if(o=function(t,n){t?i(t):e(n)},s)return a(T.error(new Error(s)));t.call(r,n,a)}));if(s)return a(T.error(new Error(s)));var u=t.call(r,n,a);return c?u:void 0}},xml2json:i,json2xml:a,md5:o,clearKey:m,fileSlice:function(e,t,n,o,r){var i;if(e.slice?i=e.slice(t,n):e.mozSlice?i=e.mozSlice(t,n):e.webkitSlice&&(i=e.webkitSlice(t,n)),o&&y){var a=new FileReader;a.onload=function(e){i=null,r(new Blob([a.result]))},a.readAsArrayBuffer(i)}else r(i)},getBodyMd5:function(e,t,n,o){n=n||g,e?"string"==typeof t?n(T.md5(t,!0)):Blob&&t instanceof Blob?T.getFileMd5(t,(function(e,t){n(t)}),o):n():n()},getFileMd5:function(e,t,n){var r=e.size,i=0,a=o.getCtx(),s=function(o){if(o>=r){var c=a.digest("hex");t(null,c)}else{var u=Math.min(r,o+C);T.fileSlice(e,o,u,!1,(function(e){!function(e,t){var n,o=new FileReader;FileReader.prototype.readAsBinaryString?(n=FileReader.prototype.readAsBinaryString,o.onload=function(){t(this.result)}):FileReader.prototype.readAsArrayBuffer?n=function(e){var n="",o=new FileReader;o.onload=function(e){for(var r=new Uint8Array(o.result),i=r.byteLength,a=0;a<i;a++)n+=String.fromCharCode(r[a]);t(n)},o.readAsArrayBuffer(e)}:console.error("FileReader not support readAsBinaryString"),n.call(o,e)}(e,(function(t){e=null,a=a.update(t,!0),i+=t.length,t=null,n&&n({loaded:i,total:r,percent:Math.round(i/r*1e4)/1e4}),s(o+C)}))}))}};s(0)},binaryBase64:function(e){var t,n,o,r="";for(t=0,n=e.length/2;t<n;t++)o=parseInt(e[2*t]+e[2*t+1],16),r+=String.fromCharCode(o);return btoa(r)},extend:k,isArray:S,isInArray:function(e,t){for(var n=!1,o=0;o<e.length;o++)if(t===e[o]){n=!0;break}return n},makeArray:function(e){return S(e)?e:[e]},each:R,map:b,filter:function(e,t){var n=S(e),o=n?[]:{};for(var r in e)e.hasOwnProperty(r)&&t(e[r],r)&&(n?o.push(e[r]):o[r]=e[r]);return o},clone:v,attr:function(e,t,n){return e&&t in e?e[t]:n},uuid:function(){var e=function(){return(65536*(1+Math.random())|0).toString(16).substring(1)};return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()},camSafeUrlEncode:s,throttleOnProgress:function(e,t){var n,o,r=this,i=0,a=0,s=Date.now();function c(){if(o=0,t&&"function"==typeof t){n=Date.now();var r,c=Math.max(0,Math.round((a-i)/((n-s)/1e3)*100)/100)||0;r=0===a&&0===e?1:Math.floor(a/e*100)/100||0,s=n,i=a;try{t({loaded:a,total:e,speed:c,percent:r})}catch(e){}}}return function(t,n){if(t&&(a=t.loaded,e=t.total),n)clearTimeout(o),c();else{if(o)return;o=setTimeout(c,r.options.ProgressInterval)}}},getFileSize:function(e,t,n){var o;"string"==typeof t.Body?t.Body=new Blob([t.Body],{type:"text/plain"}):t.Body instanceof ArrayBuffer&&(t.Body=new Blob([t.Body])),t.Body&&(t.Body instanceof Blob||"[object File]"===t.Body.toString()||"[object Blob]"===t.Body.toString())?(o=t.Body.size,t.ContentLength=o,n(null,o)):n(T.error(new Error("params body format error, Only allow File|Blob|String.")))},getSkewTime:B,error:function(e,t){var n=e;return e.message=e.message||null,"string"==typeof t?(e.error=t,e.message=t):"object"==typeof t&&null!==t&&(k(e,t),(t.code||t.name)&&(e.code=t.code||t.name),t.message&&(e.message=t.message),t.stack&&(e.stack=t.stack)),"function"==typeof Object.defineProperty&&(Object.defineProperty(e,"name",{writable:!0,enumerable:!1}),Object.defineProperty(e,"message",{enumerable:!0})),e.name=t&&t.name||e.name||e.code||"Error",e.code||(e.code=e.name),e.error||(e.error=v(n)),e},getAuth:function(e){var t,n=(e=e||{}).SecretId,o=e.SecretKey,i=e.KeyTime,a=(e.method||e.Method||"get").toLowerCase(),c=v(e.Query||e.params||{}),u=v(e.Headers||e.headers||{}),l=e.Key||"";if(e.UseRawKey?t=e.Pathname||e.pathname||"/"+l:0!==(t=e.Pathname||e.pathname||l).indexOf("/")&&(t="/"+t),!n)throw new Error("missing param SecretId");if(!o)throw new Error("missing param SecretKey");var d=function(e,t){var n=[];for(var o in e)e.hasOwnProperty(o)&&n.push(t?s(o).toLowerCase():o);return n.sort((function(e,t){return(e=e.toLowerCase())===(t=t.toLowerCase())?0:e>t?1:-1}))},h=function(e){var t,n,o,r=[],i=d(e);for(t=0;t<i.length;t++)o=void 0===e[n=i[t]]||null===e[n]?"":""+e[n],n=s(n).toLowerCase(),o=s(o)||"",r.push(n+"="+o);return r.join("&")},f=Math.round(B(e.SystemClockOffset)/1e3)-1,p=f,g=e.Expires||e.expires;p+=void 0===g?900:1*g||0;var m=n,y=i||f+";"+p,C=i||f+";"+p,k=d(u).join(";").toLowerCase(),S=d(c).join(";").toLowerCase(),R=r.HmacSHA1(C,o).toString(),b=[a,t,h(c),h(u),""].join("\n"),A=["sha1",y,r.SHA1(b).toString(),""].join("\n");return["q-sign-algorithm=sha1","q-ak="+m,"q-sign-time="+y,"q-key-time="+C,"q-header-list="+k,"q-url-param-list="+S,"q-signature="+r.HmacSHA1(A,R).toString()].join("&")},parseSelectPayload:function(e){for(var t={},n=p(e),o={records:[]};e.byteLength;){var r,i=f(e,32,0),a=f(e,32,4),s=i-a-16,c=0;for(e=e.slice(12);c<a;){var u=f(e,8,c),l=p(e,c+1,c+1+u),d=f(e,16,c+u+2),h=p(e,c+u+4,c+u+4+d);t[l]=h,c+=u+4+d}if("Records"===t[":event-type"])r=p(e,c,c+s,!0),o.records.push(r);else if("Stats"===t[":event-type"])r=p(e,c,c+s,!0),o.stats=T.xml2json(r).Stats;else if("error"===t[":event-type"]){var g=t[":error-code"],m=t[":error-message"],y=new Error(m);y.message=m,y.name=y.code=g,o.error=y}else["Progress","Continuation","End"].includes(t[":event-type"]);e=e.slice(c+s+4)}return{payload:o.records.join(""),body:n}},isBrowser:!0,isNode:function(){return"object"!=typeof window&&"object"==typeof process&&!0}};e.exports=T},6150:(e,t,n)=>{function o(e){this.options=e||{locator:{}}}function r(){this.cdata=!1}function i(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function a(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function s(e,t,n){return"string"==typeof e?e.substr(t,n):e.length>=t+n||t?new java.lang.String(e,t,n)+"":e}function c(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}o.prototype.parseFromString=function(e,t){var n=this.options,o=new u,i=n.domBuilder||new r,s=n.errorHandler,c=n.locator,l=n.xmlns||{},d={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return c&&i.setDocumentLocator(c),o.errorHandler=function(e,t,n){if(!e){if(t instanceof r)return t;e=t}var o={},i=e instanceof Function;function s(t){var r=e[t];!r&&i&&(r=2==e.length?function(n){e(t,n)}:e),o[t]=r&&function(e){r("[xmldom "+t+"]\t"+e+a(n))}||function(){}}return n=n||{},s("warning"),s("error"),s("fatalError"),o}(s,i,c),o.domBuilder=n.domBuilder||i,/\/x?html?$/.test(t)&&(d.nbsp=" ",d.copy="©",l[""]="http://www.w3.org/1999/xhtml"),l.xml=l.xml||"http://www.w3.org/XML/1998/namespace",e?o.parse(e,l,d):o.errorHandler.error("invalid doc source"),i.doc},r.prototype={startDocument:function(){this.doc=(new l).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,n,o){var r=this.doc,a=r.createElementNS(e,n||t),s=o.length;c(this,a),this.currentElement=a,this.locator&&i(this.locator,a);for(var u=0;u<s;u++){e=o.getURI(u);var l=o.getValue(u),d=(n=o.getQName(u),r.createAttributeNS(e,n));this.locator&&i(o.getLocator(u),d),d.value=d.nodeValue=l,a.setAttributeNode(d)}},endElement:function(e,t,n){var o=this.currentElement;o.tagName,this.currentElement=o.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var n=this.doc.createProcessingInstruction(e,t);this.locator&&i(this.locator,n),c(this,n)},ignorableWhitespace:function(e,t,n){},characters:function(e,t,n){if(e=s.apply(this,arguments)){if(this.cdata)var o=this.doc.createCDATASection(e);else o=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(o):/^\s*$/.test(e)&&this.doc.appendChild(o),this.locator&&i(this.locator,o)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,n){e=s.apply(this,arguments);var o=this.doc.createComment(e);this.locator&&i(this.locator,o),c(this,o)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,n){var o=this.doc.implementation;if(o&&o.createDocumentType){var r=o.createDocumentType(e,t,n);this.locator&&i(this.locator,r),c(this,r)}},warning:function(e){console.warn("[xmldom warning]\t"+e,a(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,a(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,a(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,(function(e){r.prototype[e]=function(){return null}}));var u=n(6147).G,l=n(9541).DOMImplementation;n(9541),t.a=o},9541:(e,t)=>{function n(e,t){for(var n in e)t[n]=e[n]}function o(e,t){var o=e.prototype;if(Object.create){var r=Object.create(t.prototype);o.__proto__=r}if(!(o instanceof t)){function i(){}i.prototype=t.prototype,n(o,i=new i),e.prototype=o=i}o.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),o.constructor=e)}var r={},i=r.ELEMENT_NODE=1,a=r.ATTRIBUTE_NODE=2,s=r.TEXT_NODE=3,c=r.CDATA_SECTION_NODE=4,u=r.ENTITY_REFERENCE_NODE=5,l=r.ENTITY_NODE=6,d=r.PROCESSING_INSTRUCTION_NODE=7,h=r.COMMENT_NODE=8,f=r.DOCUMENT_NODE=9,p=r.DOCUMENT_TYPE_NODE=10,g=r.DOCUMENT_FRAGMENT_NODE=11,m=r.NOTATION_NODE=12,y={},C={},v=(y.INDEX_SIZE_ERR=(C[1]="Index size error",1),y.DOMSTRING_SIZE_ERR=(C[2]="DOMString size error",2),y.HIERARCHY_REQUEST_ERR=(C[3]="Hierarchy request error",3)),k=(y.WRONG_DOCUMENT_ERR=(C[4]="Wrong document",4),y.INVALID_CHARACTER_ERR=(C[5]="Invalid character",5),y.NO_DATA_ALLOWED_ERR=(C[6]="No data allowed",6),y.NO_MODIFICATION_ALLOWED_ERR=(C[7]="No modification allowed",7),y.NOT_FOUND_ERR=(C[8]="Not found",8)),S=(y.NOT_SUPPORTED_ERR=(C[9]="Not supported",9),y.INUSE_ATTRIBUTE_ERR=(C[10]="Attribute in use",10));function R(e,t){if(t instanceof Error)var n=t;else n=this,Error.call(this,C[e]),this.message=C[e],Error.captureStackTrace&&Error.captureStackTrace(this,R);return n.code=e,t&&(this.message=this.message+": "+t),n}function b(){}function A(e,t){this._node=e,this._refresh=t,B(this)}function B(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var o=e._refresh(e._node);ne(e,"length",o.length),n(o,e),e._inc=t}}function T(){}function E(e,t){for(var n=e.length;n--;)if(e[n]===t)return n}function x(e,t,n,o){if(o?t[E(t,o)]=n:t[t.length++]=n,e){n.ownerElement=e;var r=e.ownerDocument;r&&(o&&P(r,e,o),function(e,t,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&(t._nsMap[n.prefix?n.localName:""]=n.value)}(r,e,n))}}function w(e,t,n){var o=E(t,n);if(!(o>=0))throw R(k,new Error(e.tagName+"@"+n));for(var r=t.length-1;o<r;)t[o]=t[++o];if(t.length=r,e){var i=e.ownerDocument;i&&(P(i,e,n),n.ownerElement=null)}}function _(e){if(this._features={},e)for(var t in e)this._features=e[t]}function I(){}function D(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function O(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(O(e,t))return!0}while(e=e.nextSibling)}function N(){}function P(e,t,n,o){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==n.namespaceURI&&delete t._nsMap[n.prefix?n.localName:""]}function U(e,t,n){if(e&&e._inc){e._inc++;var o=t.childNodes;if(n)o[o.length++]=n;else{for(var r=t.firstChild,i=0;r;)o[i++]=r,r=r.nextSibling;o.length=i}}}function M(e,t){var n=t.previousSibling,o=t.nextSibling;return n?n.nextSibling=o:e.firstChild=o,o?o.previousSibling=n:e.lastChild=n,U(e.ownerDocument,e),t}function H(e,t,n){var o=t.parentNode;if(o&&o.removeChild(t),t.nodeType===g){var r=t.firstChild;if(null==r)return t;var i=t.lastChild}else r=i=t;var a=n?n.previousSibling:e.lastChild;r.previousSibling=a,i.nextSibling=n,a?a.nextSibling=r:e.firstChild=r,null==n?e.lastChild=i:n.previousSibling=i;do{r.parentNode=e}while(r!==i&&(r=r.nextSibling));return U(e.ownerDocument||e,e),t.nodeType==g&&(t.firstChild=t.lastChild=null),t}function L(){this._nsMap={}}function F(){}function K(){}function j(){}function z(){}function G(){}function q(){}function V(){}function W(){}function X(){}function Q(){}function $(){}function J(e,t){var n=[],o=9==this.nodeType?this.documentElement:this,r=o.prefix,i=o.namespaceURI;if(i&&null==r&&null==(r=o.lookupPrefix(i)))var a=[{namespace:i,prefix:null}];return Z(this,n,e,t,a),n.join("")}function Y(e,t,n){var o=e.prefix||"",r=e.namespaceURI;if(!o&&!r)return!1;if("xml"===o&&"http://www.w3.org/XML/1998/namespace"===r||"http://www.w3.org/2000/xmlns/"==r)return!1;for(var i=n.length;i--;){var a=n[i];if(a.prefix==o)return a.namespace!=r}return!0}function Z(e,t,n,o,r){if(o){if(!(e=o(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case i:r||(r=[]),r.length;var l=e.attributes,m=l.length,y=e.firstChild,C=e.tagName;n="http://www.w3.org/1999/xhtml"===e.namespaceURI||n,t.push("<",C);for(var v=0;v<m;v++)"xmlns"==(k=l.item(v)).prefix?r.push({prefix:k.localName,namespace:k.value}):"xmlns"==k.nodeName&&r.push({prefix:"",namespace:k.value});for(v=0;v<m;v++){var k;if(Y(k=l.item(v),0,r)){var S=k.prefix||"",R=k.namespaceURI,b=S?" xmlns:"+S:" xmlns";t.push(b,'="',R,'"'),r.push({prefix:S,namespace:R})}Z(k,t,n,o,r)}if(Y(e,0,r)&&(S=e.prefix||"",R=e.namespaceURI,b=S?" xmlns:"+S:" xmlns",t.push(b,'="',R,'"'),r.push({prefix:S,namespace:R})),y||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(C)){if(t.push(">"),n&&/^script$/i.test(C))for(;y;)y.data?t.push(y.data):Z(y,t,n,o,r),y=y.nextSibling;else for(;y;)Z(y,t,n,o,r),y=y.nextSibling;t.push("</",C,">")}else t.push("/>");return;case f:case g:for(y=e.firstChild;y;)Z(y,t,n,o,r),y=y.nextSibling;return;case a:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,D),'"');case s:return t.push(e.data.replace(/[<&]/g,D));case c:return t.push("<![CDATA[",e.data,"]]>");case h:return t.push("\x3c!--",e.data,"--\x3e");case p:var A=e.publicId,B=e.systemId;if(t.push("<!DOCTYPE ",e.name),A)t.push(' PUBLIC "',A),B&&"."!=B&&t.push('" "',B),t.push('">');else if(B&&"."!=B)t.push(' SYSTEM "',B,'">');else{var T=e.internalSubset;T&&t.push(" [",T,"]"),t.push(">")}return;case d:return t.push("<?",e.target," ",e.data,"?>");case u:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function ee(e,t,n){var o;switch(t.nodeType){case i:(o=t.cloneNode(!1)).ownerDocument=e;case g:break;case a:n=!0}if(o||(o=t.cloneNode(!1)),o.ownerDocument=e,o.parentNode=null,n)for(var r=t.firstChild;r;)o.appendChild(ee(e,r,n)),r=r.nextSibling;return o}function te(e,t,n){var o=new t.constructor;for(var r in t){var s=t[r];"object"!=typeof s&&s!=o[r]&&(o[r]=s)}switch(t.childNodes&&(o.childNodes=new b),o.ownerDocument=e,o.nodeType){case i:var c=t.attributes,u=o.attributes=new T,l=c.length;u._ownerElement=o;for(var d=0;d<l;d++)o.setAttributeNode(te(e,c.item(d),!0));break;case a:n=!0}if(n)for(var h=t.firstChild;h;)o.appendChild(te(e,h,n)),h=h.nextSibling;return o}function ne(e,t,n){e[t]=n}y.INVALID_STATE_ERR=(C[11]="Invalid state",11),y.SYNTAX_ERR=(C[12]="Syntax error",12),y.INVALID_MODIFICATION_ERR=(C[13]="Invalid modification",13),y.NAMESPACE_ERR=(C[14]="Invalid namespace",14),y.INVALID_ACCESS_ERR=(C[15]="Invalid access",15),R.prototype=Error.prototype,n(y,R),b.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var n=[],o=0;o<this.length;o++)Z(this[o],n,e,t);return n.join("")}},A.prototype.item=function(e){return B(this),this[e]},o(A,b),T.prototype={length:0,item:b.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var n=this[t];if(n.nodeName==e)return n}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new R(S);var n=this.getNamedItem(e.nodeName);return x(this._ownerElement,this,e,n),n},setNamedItemNS:function(e){var t,n=e.ownerElement;if(n&&n!=this._ownerElement)throw new R(S);return t=this.getNamedItemNS(e.namespaceURI,e.localName),x(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return w(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var n=this.getNamedItemNS(e,t);return w(this._ownerElement,this,n),n},getNamedItemNS:function(e,t){for(var n=this.length;n--;){var o=this[n];if(o.localName==t&&o.namespaceURI==e)return o}return null}},_.prototype={hasFeature:function(e,t){var n=this._features[e.toLowerCase()];return!(!n||t&&!(t in n))},createDocument:function(e,t,n){var o=new N;if(o.implementation=this,o.childNodes=new b,o.doctype=n,n&&o.appendChild(n),t){var r=o.createElementNS(e,t);o.appendChild(r)}return o},createDocumentType:function(e,t,n){var o=new q;return o.name=e,o.nodeName=e,o.publicId=t,o.systemId=n,o}},I.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return H(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return M(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return te(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==s&&e.nodeType==s?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var n=t._nsMap;if(n)for(var o in n)if(n[o]==e)return o;t=t.nodeType==a?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var n=t._nsMap;if(n&&e in n)return n[e];t=t.nodeType==a?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},n(r,I),n(r,I.prototype),N.prototype={nodeName:"#document",nodeType:f,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==g){for(var n=e.firstChild;n;){var o=n.nextSibling;this.insertBefore(n,t),n=o}return e}return null==this.documentElement&&e.nodeType==i&&(this.documentElement=e),H(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),M(this,e)},importNode:function(e,t){return ee(this,e,t)},getElementById:function(e){var t=null;return O(this.documentElement,(function(n){if(n.nodeType==i&&n.getAttribute("id")==e)return t=n,!0})),t},createElement:function(e){var t=new L;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new b,(t.attributes=new T)._ownerElement=t,t},createDocumentFragment:function(){var e=new Q;return e.ownerDocument=this,e.childNodes=new b,e},createTextNode:function(e){var t=new j;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new z;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new G;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var n=new $;return n.ownerDocument=this,n.tagName=n.target=e,n.nodeValue=n.data=t,n},createAttribute:function(e){var t=new F;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new X;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var n=new L,o=t.split(":"),r=n.attributes=new T;return n.childNodes=new b,n.ownerDocument=this,n.nodeName=t,n.tagName=t,n.namespaceURI=e,2==o.length?(n.prefix=o[0],n.localName=o[1]):n.localName=t,r._ownerElement=n,n},createAttributeNS:function(e,t){var n=new F,o=t.split(":");return n.ownerDocument=this,n.nodeName=t,n.name=t,n.namespaceURI=e,n.specified=!0,2==o.length?(n.prefix=o[0],n.localName=o[1]):n.localName=t,n}},o(N,I),L.prototype={nodeType:i,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var n=this.ownerDocument.createAttribute(e);n.value=n.nodeValue=""+t,this.setAttributeNode(n)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===g?this.insertBefore(e,null):function(e,t){var n=t.parentNode;if(n){var o=e.lastChild;n.removeChild(t),o=e.lastChild}return o=e.lastChild,t.parentNode=e,t.previousSibling=o,t.nextSibling=null,o?o.nextSibling=t:e.firstChild=t,e.lastChild=t,U(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);n&&this.removeAttributeNode(n)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var n=this.getAttributeNodeNS(e,t);return n&&n.value||""},setAttributeNS:function(e,t,n){var o=this.ownerDocument.createAttributeNS(e,t);o.value=o.nodeValue=""+n,this.setAttributeNode(o)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new A(this,(function(t){var n=[];return O(t,(function(o){o===t||o.nodeType!=i||"*"!==e&&o.tagName!=e||n.push(o)})),n}))},getElementsByTagNameNS:function(e,t){return new A(this,(function(n){var o=[];return O(n,(function(r){r===n||r.nodeType!==i||"*"!==e&&r.namespaceURI!==e||"*"!==t&&r.localName!=t||o.push(r)})),o}))}},N.prototype.getElementsByTagName=L.prototype.getElementsByTagName,N.prototype.getElementsByTagNameNS=L.prototype.getElementsByTagNameNS,o(L,I),F.prototype.nodeType=a,o(F,I),K.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(C[v])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,n){n=this.data.substring(0,e)+n+this.data.substring(e+t),this.nodeValue=this.data=n,this.length=n.length}},o(K,I),j.prototype={nodeName:"#text",nodeType:s,splitText:function(e){var t=this.data,n=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var o=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(o,this.nextSibling),o}},o(j,K),z.prototype={nodeName:"#comment",nodeType:h},o(z,K),G.prototype={nodeName:"#cdata-section",nodeType:c},o(G,K),q.prototype.nodeType=p,o(q,I),V.prototype.nodeType=m,o(V,I),W.prototype.nodeType=l,o(W,I),X.prototype.nodeType=u,o(X,I),Q.prototype.nodeName="#document-fragment",Q.prototype.nodeType=g,o(Q,I),$.prototype.nodeType=d,o($,I),I.prototype.toString=J;try{if(Object.defineProperty){function oe(e){switch(e.nodeType){case i:case g:var t=[];for(e=e.firstChild;e;)7!==e.nodeType&&8!==e.nodeType&&t.push(oe(e)),e=e.nextSibling;return t.join("");default:return e.nodeValue}}Object.defineProperty(A.prototype,"length",{get:function(){return B(this),this.$$length}}),Object.defineProperty(I.prototype,"textContent",{get:function(){return oe(this)},set:function(e){switch(this.nodeType){case i:case g:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),ne=function(e,t,n){e["$$"+t]=n}}}catch(e){}t.DOMImplementation=_},6147:(e,t)=>{var n=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,o=new RegExp("[\\-\\.0-9"+n.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),r=new RegExp("^"+n.source+o.source+"*(?::"+n.source+o.source+"*)?$");function i(){}function a(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function s(e,t,n,o,r,i){for(var a,s=++t,c=0;;){var u=e.charAt(s);switch(u){case"=":if(1===c)a=e.slice(t,s),c=3;else{if(2!==c)throw new Error("attribute equal must after attrName");c=3}break;case"'":case'"':if(3===c||1===c){if(1===c&&(i.warning('attribute value must after "="'),a=e.slice(t,s)),t=s+1,!((s=e.indexOf(u,t))>0))throw new Error("attribute value no end '"+u+"' match");l=e.slice(t,s).replace(/&#?\w+;/g,r),n.add(a,l,t-1),c=5}else{if(4!=c)throw new Error('attribute value must after "="');l=e.slice(t,s).replace(/&#?\w+;/g,r),n.add(a,l,t),i.warning('attribute "'+a+'" missed start quot('+u+")!!"),t=s+1,c=5}break;case"/":switch(c){case 0:n.setTagName(e.slice(t,s));case 5:case 6:case 7:c=7,n.closed=!0;case 4:case 1:case 2:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return i.error("unexpected end of input"),0==c&&n.setTagName(e.slice(t,s)),s;case">":switch(c){case 0:n.setTagName(e.slice(t,s));case 5:case 6:case 7:break;case 4:case 1:"/"===(l=e.slice(t,s)).slice(-1)&&(n.closed=!0,l=l.slice(0,-1));case 2:2===c&&(l=a),4==c?(i.warning('attribute "'+l+'" missed quot(")!!'),n.add(a,l.replace(/&#?\w+;/g,r),t)):("http://www.w3.org/1999/xhtml"===o[""]&&l.match(/^(?:disabled|checked|selected)$/i)||i.warning('attribute "'+l+'" missed value!! "'+l+'" instead!!'),n.add(l,l,t));break;case 3:throw new Error("attribute value missed!!")}return s;case"":u=" ";default:if(u<=" ")switch(c){case 0:n.setTagName(e.slice(t,s)),c=6;break;case 1:a=e.slice(t,s),c=2;break;case 4:var l=e.slice(t,s).replace(/&#?\w+;/g,r);i.warning('attribute "'+l+'" missed quot(")!!'),n.add(a,l,t);case 5:c=6}else switch(c){case 2:n.tagName,"http://www.w3.org/1999/xhtml"===o[""]&&a.match(/^(?:disabled|checked|selected)$/i)||i.warning('attribute "'+a+'" missed value!! "'+a+'" instead2!!'),n.add(a,a,t),t=s,c=1;break;case 5:i.warning('attribute space is required"'+a+'"!!');case 6:c=1,t=s;break;case 3:c=4,t=s;break;case 7:throw new Error("elements closed character '/' and '>' must be connected to")}}s++}}function c(e,t,n){for(var o=e.tagName,r=null,i=e.length;i--;){var a=e[i],s=a.qName,c=a.value;if((f=s.indexOf(":"))>0)var u=a.prefix=s.slice(0,f),l=s.slice(f+1),h="xmlns"===u&&l;else l=s,u=null,h="xmlns"===s&&"";a.localName=l,!1!==h&&(null==r&&(r={},d(n,n={})),n[h]=r[h]=c,a.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(h,c))}for(i=e.length;i--;)(u=(a=e[i]).prefix)&&("xml"===u&&(a.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==u&&(a.uri=n[u||""]));var f;(f=o.indexOf(":"))>0?(u=e.prefix=o.slice(0,f),l=e.localName=o.slice(f+1)):(u=null,l=e.localName=o);var p=e.uri=n[u||""];if(t.startElement(p,l,o,e),!e.closed)return e.currentNSMap=n,e.localNSMap=r,!0;if(t.endElement(p,l,o),r)for(u in r)t.endPrefixMapping(u)}function u(e,t,n,o,r){if(/^(?:script|textarea)$/i.test(n)){var i=e.indexOf("</"+n+">",t),a=e.substring(t+1,i);if(/[&<]/.test(a))return/^script$/i.test(n)?(r.characters(a,0,a.length),i):(a=a.replace(/&#?\w+;/g,o),r.characters(a,0,a.length),i)}return t+1}function l(e,t,n,o){var r=o[n];return null==r&&((r=e.lastIndexOf("</"+n+">"))<t&&(r=e.lastIndexOf("</"+n)),o[n]=r),r<t}function d(e,t){for(var n in e)t[n]=e[n]}function h(e,t,n,o){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(r=e.indexOf("--\x3e",t+4))>t?(n.comment(e,t+4,r-t-4),r+3):(o.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var r=e.indexOf("]]>",t+9);return n.startCDATA(),n.characters(e,t+9,r-t-9),n.endCDATA(),r+3}var i=function(e,t){var n,o=[],r=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;for(r.lastIndex=t,r.exec(e);n=r.exec(e);)if(o.push(n),n[1])return o}(e,t),a=i.length;if(a>1&&/!doctype/i.test(i[0][0])){var s=i[1][0],c=a>3&&/^public$/i.test(i[2][0])&&i[3][0],u=a>4&&i[4][0],l=i[a-1];return n.startDTD(s,c&&c.replace(/^(['"])(.*?)\1$/,"$2"),u&&u.replace(/^(['"])(.*?)\1$/,"$2")),n.endDTD(),l.index+l[0].length}}return-1}function f(e,t,n){var o=e.indexOf("?>",t);if(o){var r=e.substring(t,o).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);return r?(r[0].length,n.processingInstruction(r[1],r[2]),o+2):-1}return-1}function p(e){}function g(e,t){return e.__proto__=t,e}i.prototype={parse:function(e,t,n){var o=this.domBuilder;o.startDocument(),d(t,t={}),function(e,t,n,o,r){function i(e){var t=e.slice(1,-1);return t in n?n[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),n=56320+(1023&e);return String.fromCharCode(t,n)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(r.error("entity not found:"+e),e)}function d(t){if(t>R){var n=e.substring(R,t).replace(/&#?\w+;/g,i);v&&g(R),o.characters(n,0,t-R),R=t}}function g(t,n){for(;t>=y&&(n=C.exec(e));)m=n.index,y=m+n[0].length,v.lineNumber++;v.columnNumber=t-m+1}for(var m=0,y=0,C=/.*(?:\r\n?|\n)|.*$/g,v=o.locator,k=[{currentNSMap:t}],S={},R=0;;){try{var b=e.indexOf("<",R);if(b<0){if(!e.substr(R).match(/^\s*$/)){var A=o.doc,B=A.createTextNode(e.substr(R));A.appendChild(B),o.currentElement=B}return}switch(b>R&&d(b),e.charAt(b+1)){case"/":var T=e.indexOf(">",b+3),E=e.substring(b+2,T),x=k.pop();T<0?(E=e.substring(b+2).replace(/[\s<].*/,""),r.error("end tag name: "+E+" is not complete:"+x.tagName),T=b+1+E.length):E.match(/\s</)&&(E=E.replace(/[\s<].*/,""),r.error("end tag name: "+E+" maybe not complete"),T=b+1+E.length);var w=x.localNSMap,_=x.tagName==E;if(_||x.tagName&&x.tagName.toLowerCase()==E.toLowerCase()){if(o.endElement(x.uri,x.localName,E),w)for(var I in w)o.endPrefixMapping(I);_||r.fatalError("end tag name: "+E+" is not match the current start tagName:"+x.tagName)}else k.push(x);T++;break;case"?":v&&g(b),T=f(e,b,o);break;case"!":v&&g(b),T=h(e,b,o,r);break;default:v&&g(b);var D=new p,O=k[k.length-1].currentNSMap,N=(T=s(e,b,D,O,i,r),D.length);if(!D.closed&&l(e,T,D.tagName,S)&&(D.closed=!0,n.nbsp||r.warning("unclosed xml attribute")),v&&N){for(var P=a(v,{}),U=0;U<N;U++){var M=D[U];g(M.offset),M.locator=a(v,{})}o.locator=P,c(D,o,O)&&k.push(D),o.locator=v}else c(D,o,O)&&k.push(D);"http://www.w3.org/1999/xhtml"!==D.uri||D.closed?T++:T=u(e,T,D.tagName,i,o)}}catch(e){r.error("element parse error: "+e),T=-1}T>R?R=T:d(Math.max(b,R)+1)}}(e,t,n,o,this.errorHandler),o.endDocument()}},p.prototype={setTagName:function(e){if(!r.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,n){if(!r.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:n}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},g({},g.prototype)instanceof g||(g=function(e,t){function n(){}for(t in n.prototype=t,n=new n,e)n[t]=e[t];return n}),t.G=i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,